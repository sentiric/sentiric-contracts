// DOSYA: sentiric-contracts/proto/sentiric/media/v1/media.proto
syntax = "proto3";

package sentiric.media.v1;

option go_package = "github.com/sentiric/sentiric-contracts/gen/go/sentiric/media/v1;mediav1";

service MediaService {
  rpc AllocatePort(AllocatePortRequest) returns (AllocatePortResponse);
  rpc ReleasePort(ReleasePortRequest) returns (ReleasePortResponse);
  rpc PlayAudio(PlayAudioRequest) returns (PlayAudioResponse);
  rpc RecordAudio(RecordAudioRequest) returns (stream RecordAudioResponse);

  // YENİ RPC'LER
  rpc StartRecording(StartRecordingRequest) returns (StartRecordingResponse);
  rpc StopRecording(StopRecordingRequest) returns (StopRecordingResponse);
}

// ... AllocatePort, ReleasePort, PlayAudio mesajları aynı kalır ...
message AllocatePortRequest {
  string call_id = 1;
}
message AllocatePortResponse {
  uint32 rtp_port = 1;
}
message ReleasePortRequest {
  uint32 rtp_port = 1;
}
message ReleasePortResponse {
  bool success = 1;
}
message PlayAudioRequest {
  string rtp_target_addr = 1;
  uint32 server_rtp_port = 2;
  string audio_uri = 3;
}
message PlayAudioResponse {
  bool success = 1;
  string message = 2;
}


// --- GÜNCELLENMİŞ MESAJLAR ---
message RecordAudioRequest {
  uint32 server_rtp_port = 1;
  optional uint32 target_sample_rate = 2;
}

// YENİ VE LINT KURALLARINA UYGUN YANIT MESAJI
message RecordAudioResponse {
  // `target_sample_rate` istenirse WAV formatında, istenmezse ham PCMU
  // formatında ses verisi.
  bytes audio_data = 1;
  
  // Dönen verinin medya tipi (örn: "audio/pcmu", "audio/wav")
  string media_type = 2;
}

message StartRecordingRequest {
  uint32 server_rtp_port = 1;
  string output_uri = 2; // e.g., "file:///path/to/recording.wav" or "s3://bucket/key.mp3"
  optional uint32 sample_rate = 3; // e.g., 8000, 16000. Defaults to 16000.
  optional string format = 4; // e.g., "wav", "mp3". Defaults to "wav".
}

message StartRecordingResponse {
  bool success = 1;
}

message StopRecordingRequest {
  uint32 server_rtp_port = 1;
}

message StopRecordingResponse {
  bool success = 1;
}
