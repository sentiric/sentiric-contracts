// DOSYA: sentiric-contracts/proto/sentiric/media/v1/media.proto
syntax = "proto3";

package sentiric.media.v1;

option go_package = "github.com/sentiric/sentiric-contracts/gen/go/sentiric/media/v1;mediav1";

service MediaService {
  // Bir çağrı oturumu için yeni bir RTP portu ayırır.
  rpc AllocatePort(AllocatePortRequest) returns (AllocatePortResponse);
  
  // Bir çağrı oturumu bittiğinde kullanılan RTP portunu serbest bırakır.
  rpc ReleasePort(ReleasePortRequest) returns (ReleasePortResponse);
  
  // Devam eden bir çağrıya bir ses URI'si çalar.
  rpc PlayAudio(PlayAudioRequest) returns (PlayAudioResponse);

  // YENİ METOT: Devam eden bir çağrıdan ses kaydını başlatır ve stream eder.
  rpc RecordAudio(RecordAudioRequest) returns (stream AudioChunk);
}

// ... (Mevcut mesajlar aynı kalır) ...
message AllocatePortRequest {
  string call_id = 1;
}

message AllocatePortResponse {
  uint32 rtp_port = 1;
}

message ReleasePortRequest {
  uint32 rtp_port = 1;
}

message ReleasePortResponse {
  bool success = 1;
}

message PlayAudioRequest {
  string rtp_target_addr = 1;
  uint32 server_rtp_port = 2;
  string audio_uri = 3;
}

message PlayAudioResponse {
  bool success = 1;
  string message = 2;
}

// --- YENİ MESAJLAR ---
message RecordAudioRequest {
  // Hangi çağrı oturumunun kaydedileceğini belirtir.
  uint32 server_rtp_port = 1;
}

message AudioChunk {
  // Ham ses verisi (PCMU/G.711 formatında).
  bytes audio_data = 1;
}