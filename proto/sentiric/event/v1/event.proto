syntax = "proto3";

package sentiric.event.v1;

import "google/protobuf/timestamp.proto";
import "sentiric/dialplan/v1/dialplan.proto";
import "sentiric/user/v1/user.proto";

option go_package = "github.com/sentiric/sentiric-contracts/gen/go/sentiric/event/v1;eventv1";

// =================================================================
//                            OLAY MESAJLARI (EVENT MESSAGES)
// =================================================================
// Not: Bu dosyada tanımlanan mesajlar, servisler arası asenkron iletişimde
// (örn: RabbitMQ) kullanılacak olayların standart ve tip-güvenli
// yapısını belirlemek içindir. Bu, platform genelinde veri tutarlılığını garanti eder.

// MediaInfo, bir çağrının medya (RTP) oturumuyla ilgili temel bilgileri içerir.
// Bu yapı, `map<string, string>` gibi belirsiz ve hataya açık yapıların
// yerine geçerek tip güvenliği sağlar.
message MediaInfo {
  // Arayan tarafın RTP paketlerini gönderdiği IP adresi ve portu (örn: "1.2.3.4:12345").
  string caller_rtp_addr = 1;
  // `media-service` tarafından bu çağrı için tahsis edilen sunucu tarafı RTP portu.
  uint32 server_rtp_port = 2;
}

// CallStartedEvent, bir SIP çağrısının `sip-signaling` tarafından başarıyla
// kurulduğunu ve platformun iç mantığı tarafından işlenmeye hazır olduğunu bildirir.
// Bu olay, genellikle `agent-service` tarafından tüketilir.
message CallStartedEvent {
  // Olayın türü, standart olarak "call.started".
  string event_type = 1;
  // Tüm çağrı yaşam döngüsü boyunca işlemleri takip etmek için kullanılan benzersiz kimlik.
  string trace_id = 2;
  // Çağrının SIP Call-ID'si.
  string call_id = 3;
  // Arayanın SIP URI'si.
  string from_uri = 4;
  // Arananın SIP URI'si.
  string to_uri = 5;
  // Olayın UTC olarak oluşturulma zamanı.
  google.protobuf.Timestamp timestamp = 6;
  // `dialplan-service`'ten dönen, çağrının nasıl işleneceğine dair tüm zenginleştirilmiş bilgi.
  sentiric.dialplan.v1.ResolveDialplanResponse dialplan_resolution = 7;
  // DEĞİŞİKLİK: `map<string, string>` yerine tip-güvenli `MediaInfo` mesajı kullanılıyor.
  // Bu, tüketen servislerde (örn: agent-service) anahtar adı hatalarını ve tip dönüşüm
  // problemlerini ortadan kaldırır.
  MediaInfo media_info = 8;
}

// UserIdentifiedForCallEvent, bir çağrı sırasında arayanın kimliğinin
// `user-service` tarafından belirlendiğini veya yeni bir kullanıcı olarak
// oluşturulduğunu bildirir.
message UserIdentifiedForCallEvent {
  string event_type = 1; // "user.identified.for_call" veya "user.created.for_call"
  string trace_id = 2;
  string call_id = 3;
  google.protobuf.Timestamp timestamp = 4;
  sentiric.user.v1.User user = 5;
  sentiric.user.v1.Contact contact = 6;
}

// CallRecordingAvailableEvent, bir çağrının ses kaydının işlenip
// depolama alanına (örn: S3) yüklendiğini bildirir.
message CallRecordingAvailableEvent {
  string event_type = 1; // "call.recording.available"
  string trace_id = 2;
  string call_id = 3;
  google.protobuf.Timestamp timestamp = 4;
  // Kaydın depolama alanındaki URI'si (örn: "s3://sentiric/recordings/call123.wav").
  string recording_uri = 5;
  // Kayda erişilebilecek genel URL (eğer varsa).
  string public_url = 6;
}

// CallEndedEvent, bir çağrının sonlandığını bildirir.
message CallEndedEvent {
  string event_type = 1; // "call.ended"
  string trace_id = 2;
  string call_id = 3;
  google.protobuf.Timestamp timestamp = 4;
  // Çağrının sonlanma nedeni (örn: "normal_clearing", "terminated_by_request").
  string reason = 5;
}

// ... CallEndedEvent mesajından sonra ekleyin

// GenericEvent, platform genelinde diğer (çağrı dışı) asenkron olayları kapsar.
// Örn: UserCreated, DialplanUpdated, RecipeInstalled.
message GenericEvent {
  string event_type = 1; // Örn: "user.created", "dialplan.updated"
  string trace_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  string tenant_id = 4;

  // Olayla ilgili seri hale getirilmiş (Protobuf Any veya JSON dize) payload.
  string payload_json = 5;
}
