# .github/workflows/release.yml

name: Release Contracts

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Generate, Commit, and Publish Packages
    runs-on: ubuntu-latest
    permissions:
      contents: write   # Kodu commit'lemek ve push'lamak için
      packages: write   # GitHub Packages'a yayınlamak için

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Bot'un push yapabilmesi için GITHUB_TOKEN kullanıyoruz
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Setup Buf
        uses: bufbuild/buf-setup-action@v1.35.1

      - name: Generate all language stubs
        run: buf generate

      - name: Configure Git user for bot
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions-bot@users.noreply.github.com"

      - name: Commit generated code
        run: |
          git add gen/
          # Eğer 'gen' klasöründe değişiklik varsa, commit at
          if ! git diff --staged --quiet; then
            git commit -m "feat(gen): Generate code for v${{ env.VERSION }}"
          else
            echo "No changes in generated code to commit."
          fi

      - name: Push changes and update tag
        run: |
          # Yalnızca commit atıldıysa push yap ve etiketi güncelle
          if [ -n "$(git status --porcelain)" ]; then
            git push origin HEAD:main
            TAG_NAME="v${{ env.VERSION }}"
            # Mevcut etiketi silip, yeni commit'in üzerine yeniden oluşturuyoruz
            git tag -f $TAG_NAME
            git push -f origin refs/tags/$TAG_NAME
            echo "Code generated and tag updated."
          else
            echo "No push or retag needed."
          fi

      # --- Node.js Paketini Yayınla ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@sentiric'

      - name: Update package.json version
        run: npm version ${{ env.VERSION }} --no-git-tag-version --allow-same-version
      
      - name: Publish to GitHub Packages (Node.js)
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Python Paketini Yayınla (PyPI için Secret'lar gerekir) ---
      # Bu adımları PyPI'a yayınlamak istediğinizde aktif edebilirsiniz.
      # - name: Setup Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.10'
      #
      # - name: Install build dependencies
      #   run: python -m pip install build twine
      #
      # - name: Build Python package
      #   run: python -m build
      #
      # - name: Publish to PyPI
      #   run: twine upload dist/*
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }} # Bu secret'ı repo ayarlarından eklemelisiniz.