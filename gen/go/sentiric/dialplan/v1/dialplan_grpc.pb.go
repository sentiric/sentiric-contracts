// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sentiric/dialplan/v1/dialplan.proto

package dialplanv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DialplanService_ResolveDialplan_FullMethodName    = "/sentiric.dialplan.v1.DialplanService/ResolveDialplan"
	DialplanService_CreateInboundRoute_FullMethodName = "/sentiric.dialplan.v1.DialplanService/CreateInboundRoute"
	DialplanService_GetInboundRoute_FullMethodName    = "/sentiric.dialplan.v1.DialplanService/GetInboundRoute"
	DialplanService_UpdateInboundRoute_FullMethodName = "/sentiric.dialplan.v1.DialplanService/UpdateInboundRoute"
	DialplanService_DeleteInboundRoute_FullMethodName = "/sentiric.dialplan.v1.DialplanService/DeleteInboundRoute"
	DialplanService_ListInboundRoutes_FullMethodName  = "/sentiric.dialplan.v1.DialplanService/ListInboundRoutes"
	DialplanService_CreateDialplan_FullMethodName     = "/sentiric.dialplan.v1.DialplanService/CreateDialplan"
	DialplanService_GetDialplan_FullMethodName        = "/sentiric.dialplan.v1.DialplanService/GetDialplan"
	DialplanService_UpdateDialplan_FullMethodName     = "/sentiric.dialplan.v1.DialplanService/UpdateDialplan"
	DialplanService_DeleteDialplan_FullMethodName     = "/sentiric.dialplan.v1.DialplanService/DeleteDialplan"
	DialplanService_ListDialplans_FullMethodName      = "/sentiric.dialplan.v1.DialplanService/ListDialplans"
)

// DialplanServiceClient is the client API for DialplanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialplanServiceClient interface {
	ResolveDialplan(ctx context.Context, in *ResolveDialplanRequest, opts ...grpc.CallOption) (*ResolveDialplanResponse, error)
	// Inbound Route Yönetimi
	// DÜZELTME: Her RPC artık kendine özgü bir Response mesajı kullanıyor.
	CreateInboundRoute(ctx context.Context, in *CreateInboundRouteRequest, opts ...grpc.CallOption) (*CreateInboundRouteResponse, error)
	GetInboundRoute(ctx context.Context, in *GetInboundRouteRequest, opts ...grpc.CallOption) (*GetInboundRouteResponse, error)
	UpdateInboundRoute(ctx context.Context, in *UpdateInboundRouteRequest, opts ...grpc.CallOption) (*UpdateInboundRouteResponse, error)
	DeleteInboundRoute(ctx context.Context, in *DeleteInboundRouteRequest, opts ...grpc.CallOption) (*DeleteInboundRouteResponse, error)
	ListInboundRoutes(ctx context.Context, in *ListInboundRoutesRequest, opts ...grpc.CallOption) (*ListInboundRoutesResponse, error)
	// Dialplan Yönetimi
	// DÜZELTME: Her RPC artık kendine özgü bir Response mesajı kullanıyor.
	CreateDialplan(ctx context.Context, in *CreateDialplanRequest, opts ...grpc.CallOption) (*CreateDialplanResponse, error)
	GetDialplan(ctx context.Context, in *GetDialplanRequest, opts ...grpc.CallOption) (*GetDialplanResponse, error)
	UpdateDialplan(ctx context.Context, in *UpdateDialplanRequest, opts ...grpc.CallOption) (*UpdateDialplanResponse, error)
	DeleteDialplan(ctx context.Context, in *DeleteDialplanRequest, opts ...grpc.CallOption) (*DeleteDialplanResponse, error)
	ListDialplans(ctx context.Context, in *ListDialplansRequest, opts ...grpc.CallOption) (*ListDialplansResponse, error)
}

type dialplanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDialplanServiceClient(cc grpc.ClientConnInterface) DialplanServiceClient {
	return &dialplanServiceClient{cc}
}

func (c *dialplanServiceClient) ResolveDialplan(ctx context.Context, in *ResolveDialplanRequest, opts ...grpc.CallOption) (*ResolveDialplanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveDialplanResponse)
	err := c.cc.Invoke(ctx, DialplanService_ResolveDialplan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialplanServiceClient) CreateInboundRoute(ctx context.Context, in *CreateInboundRouteRequest, opts ...grpc.CallOption) (*CreateInboundRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInboundRouteResponse)
	err := c.cc.Invoke(ctx, DialplanService_CreateInboundRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialplanServiceClient) GetInboundRoute(ctx context.Context, in *GetInboundRouteRequest, opts ...grpc.CallOption) (*GetInboundRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInboundRouteResponse)
	err := c.cc.Invoke(ctx, DialplanService_GetInboundRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialplanServiceClient) UpdateInboundRoute(ctx context.Context, in *UpdateInboundRouteRequest, opts ...grpc.CallOption) (*UpdateInboundRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInboundRouteResponse)
	err := c.cc.Invoke(ctx, DialplanService_UpdateInboundRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialplanServiceClient) DeleteInboundRoute(ctx context.Context, in *DeleteInboundRouteRequest, opts ...grpc.CallOption) (*DeleteInboundRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInboundRouteResponse)
	err := c.cc.Invoke(ctx, DialplanService_DeleteInboundRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialplanServiceClient) ListInboundRoutes(ctx context.Context, in *ListInboundRoutesRequest, opts ...grpc.CallOption) (*ListInboundRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInboundRoutesResponse)
	err := c.cc.Invoke(ctx, DialplanService_ListInboundRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialplanServiceClient) CreateDialplan(ctx context.Context, in *CreateDialplanRequest, opts ...grpc.CallOption) (*CreateDialplanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDialplanResponse)
	err := c.cc.Invoke(ctx, DialplanService_CreateDialplan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialplanServiceClient) GetDialplan(ctx context.Context, in *GetDialplanRequest, opts ...grpc.CallOption) (*GetDialplanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDialplanResponse)
	err := c.cc.Invoke(ctx, DialplanService_GetDialplan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialplanServiceClient) UpdateDialplan(ctx context.Context, in *UpdateDialplanRequest, opts ...grpc.CallOption) (*UpdateDialplanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDialplanResponse)
	err := c.cc.Invoke(ctx, DialplanService_UpdateDialplan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialplanServiceClient) DeleteDialplan(ctx context.Context, in *DeleteDialplanRequest, opts ...grpc.CallOption) (*DeleteDialplanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDialplanResponse)
	err := c.cc.Invoke(ctx, DialplanService_DeleteDialplan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialplanServiceClient) ListDialplans(ctx context.Context, in *ListDialplansRequest, opts ...grpc.CallOption) (*ListDialplansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDialplansResponse)
	err := c.cc.Invoke(ctx, DialplanService_ListDialplans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DialplanServiceServer is the server API for DialplanService service.
// All implementations should embed UnimplementedDialplanServiceServer
// for forward compatibility.
type DialplanServiceServer interface {
	ResolveDialplan(context.Context, *ResolveDialplanRequest) (*ResolveDialplanResponse, error)
	// Inbound Route Yönetimi
	// DÜZELTME: Her RPC artık kendine özgü bir Response mesajı kullanıyor.
	CreateInboundRoute(context.Context, *CreateInboundRouteRequest) (*CreateInboundRouteResponse, error)
	GetInboundRoute(context.Context, *GetInboundRouteRequest) (*GetInboundRouteResponse, error)
	UpdateInboundRoute(context.Context, *UpdateInboundRouteRequest) (*UpdateInboundRouteResponse, error)
	DeleteInboundRoute(context.Context, *DeleteInboundRouteRequest) (*DeleteInboundRouteResponse, error)
	ListInboundRoutes(context.Context, *ListInboundRoutesRequest) (*ListInboundRoutesResponse, error)
	// Dialplan Yönetimi
	// DÜZELTME: Her RPC artık kendine özgü bir Response mesajı kullanıyor.
	CreateDialplan(context.Context, *CreateDialplanRequest) (*CreateDialplanResponse, error)
	GetDialplan(context.Context, *GetDialplanRequest) (*GetDialplanResponse, error)
	UpdateDialplan(context.Context, *UpdateDialplanRequest) (*UpdateDialplanResponse, error)
	DeleteDialplan(context.Context, *DeleteDialplanRequest) (*DeleteDialplanResponse, error)
	ListDialplans(context.Context, *ListDialplansRequest) (*ListDialplansResponse, error)
}

// UnimplementedDialplanServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDialplanServiceServer struct{}

func (UnimplementedDialplanServiceServer) ResolveDialplan(context.Context, *ResolveDialplanRequest) (*ResolveDialplanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDialplan not implemented")
}
func (UnimplementedDialplanServiceServer) CreateInboundRoute(context.Context, *CreateInboundRouteRequest) (*CreateInboundRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInboundRoute not implemented")
}
func (UnimplementedDialplanServiceServer) GetInboundRoute(context.Context, *GetInboundRouteRequest) (*GetInboundRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboundRoute not implemented")
}
func (UnimplementedDialplanServiceServer) UpdateInboundRoute(context.Context, *UpdateInboundRouteRequest) (*UpdateInboundRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInboundRoute not implemented")
}
func (UnimplementedDialplanServiceServer) DeleteInboundRoute(context.Context, *DeleteInboundRouteRequest) (*DeleteInboundRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInboundRoute not implemented")
}
func (UnimplementedDialplanServiceServer) ListInboundRoutes(context.Context, *ListInboundRoutesRequest) (*ListInboundRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundRoutes not implemented")
}
func (UnimplementedDialplanServiceServer) CreateDialplan(context.Context, *CreateDialplanRequest) (*CreateDialplanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDialplan not implemented")
}
func (UnimplementedDialplanServiceServer) GetDialplan(context.Context, *GetDialplanRequest) (*GetDialplanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialplan not implemented")
}
func (UnimplementedDialplanServiceServer) UpdateDialplan(context.Context, *UpdateDialplanRequest) (*UpdateDialplanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDialplan not implemented")
}
func (UnimplementedDialplanServiceServer) DeleteDialplan(context.Context, *DeleteDialplanRequest) (*DeleteDialplanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDialplan not implemented")
}
func (UnimplementedDialplanServiceServer) ListDialplans(context.Context, *ListDialplansRequest) (*ListDialplansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDialplans not implemented")
}
func (UnimplementedDialplanServiceServer) testEmbeddedByValue() {}

// UnsafeDialplanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialplanServiceServer will
// result in compilation errors.
type UnsafeDialplanServiceServer interface {
	mustEmbedUnimplementedDialplanServiceServer()
}

func RegisterDialplanServiceServer(s grpc.ServiceRegistrar, srv DialplanServiceServer) {
	// If the following call pancis, it indicates UnimplementedDialplanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DialplanService_ServiceDesc, srv)
}

func _DialplanService_ResolveDialplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveDialplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).ResolveDialplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_ResolveDialplan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).ResolveDialplan(ctx, req.(*ResolveDialplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialplanService_CreateInboundRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInboundRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).CreateInboundRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_CreateInboundRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).CreateInboundRoute(ctx, req.(*CreateInboundRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialplanService_GetInboundRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboundRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).GetInboundRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_GetInboundRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).GetInboundRoute(ctx, req.(*GetInboundRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialplanService_UpdateInboundRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInboundRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).UpdateInboundRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_UpdateInboundRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).UpdateInboundRoute(ctx, req.(*UpdateInboundRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialplanService_DeleteInboundRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInboundRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).DeleteInboundRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_DeleteInboundRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).DeleteInboundRoute(ctx, req.(*DeleteInboundRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialplanService_ListInboundRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).ListInboundRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_ListInboundRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).ListInboundRoutes(ctx, req.(*ListInboundRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialplanService_CreateDialplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDialplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).CreateDialplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_CreateDialplan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).CreateDialplan(ctx, req.(*CreateDialplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialplanService_GetDialplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).GetDialplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_GetDialplan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).GetDialplan(ctx, req.(*GetDialplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialplanService_UpdateDialplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDialplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).UpdateDialplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_UpdateDialplan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).UpdateDialplan(ctx, req.(*UpdateDialplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialplanService_DeleteDialplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDialplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).DeleteDialplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_DeleteDialplan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).DeleteDialplan(ctx, req.(*DeleteDialplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialplanService_ListDialplans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDialplansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialplanServiceServer).ListDialplans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialplanService_ListDialplans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialplanServiceServer).ListDialplans(ctx, req.(*ListDialplansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DialplanService_ServiceDesc is the grpc.ServiceDesc for DialplanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DialplanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentiric.dialplan.v1.DialplanService",
	HandlerType: (*DialplanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveDialplan",
			Handler:    _DialplanService_ResolveDialplan_Handler,
		},
		{
			MethodName: "CreateInboundRoute",
			Handler:    _DialplanService_CreateInboundRoute_Handler,
		},
		{
			MethodName: "GetInboundRoute",
			Handler:    _DialplanService_GetInboundRoute_Handler,
		},
		{
			MethodName: "UpdateInboundRoute",
			Handler:    _DialplanService_UpdateInboundRoute_Handler,
		},
		{
			MethodName: "DeleteInboundRoute",
			Handler:    _DialplanService_DeleteInboundRoute_Handler,
		},
		{
			MethodName: "ListInboundRoutes",
			Handler:    _DialplanService_ListInboundRoutes_Handler,
		},
		{
			MethodName: "CreateDialplan",
			Handler:    _DialplanService_CreateDialplan_Handler,
		},
		{
			MethodName: "GetDialplan",
			Handler:    _DialplanService_GetDialplan_Handler,
		},
		{
			MethodName: "UpdateDialplan",
			Handler:    _DialplanService_UpdateDialplan_Handler,
		},
		{
			MethodName: "DeleteDialplan",
			Handler:    _DialplanService_DeleteDialplan_Handler,
		},
		{
			MethodName: "ListDialplans",
			Handler:    _DialplanService_ListDialplans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentiric/dialplan/v1/dialplan.proto",
}
