// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sentiric/telephony/v1/action.proto

package telephonyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TelephonyActionService_PlayAudio_FullMethodName       = "/sentiric.telephony.v1.TelephonyActionService/PlayAudio"
	TelephonyActionService_TerminateCall_FullMethodName   = "/sentiric.telephony.v1.TelephonyActionService/TerminateCall"
	TelephonyActionService_SendTextMessage_FullMethodName = "/sentiric.telephony.v1.TelephonyActionService/SendTextMessage"
	TelephonyActionService_StartRecording_FullMethodName  = "/sentiric.telephony.v1.TelephonyActionService/StartRecording"
	TelephonyActionService_StopRecording_FullMethodName   = "/sentiric.telephony.v1.TelephonyActionService/StopRecording"
)

// TelephonyActionServiceClient is the client API for TelephonyActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelephonyActionServiceClient interface {
	PlayAudio(ctx context.Context, in *PlayAudioRequest, opts ...grpc.CallOption) (*PlayAudioResponse, error)
	TerminateCall(ctx context.Context, in *TerminateCallRequest, opts ...grpc.CallOption) (*TerminateCallResponse, error)
	SendTextMessage(ctx context.Context, in *SendTextMessageRequest, opts ...grpc.CallOption) (*SendTextMessageResponse, error)
	StartRecording(ctx context.Context, in *StartRecordingRequest, opts ...grpc.CallOption) (*StartRecordingResponse, error)
	StopRecording(ctx context.Context, in *StopRecordingRequest, opts ...grpc.CallOption) (*StopRecordingResponse, error)
}

type telephonyActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelephonyActionServiceClient(cc grpc.ClientConnInterface) TelephonyActionServiceClient {
	return &telephonyActionServiceClient{cc}
}

func (c *telephonyActionServiceClient) PlayAudio(ctx context.Context, in *PlayAudioRequest, opts ...grpc.CallOption) (*PlayAudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayAudioResponse)
	err := c.cc.Invoke(ctx, TelephonyActionService_PlayAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telephonyActionServiceClient) TerminateCall(ctx context.Context, in *TerminateCallRequest, opts ...grpc.CallOption) (*TerminateCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateCallResponse)
	err := c.cc.Invoke(ctx, TelephonyActionService_TerminateCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telephonyActionServiceClient) SendTextMessage(ctx context.Context, in *SendTextMessageRequest, opts ...grpc.CallOption) (*SendTextMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTextMessageResponse)
	err := c.cc.Invoke(ctx, TelephonyActionService_SendTextMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telephonyActionServiceClient) StartRecording(ctx context.Context, in *StartRecordingRequest, opts ...grpc.CallOption) (*StartRecordingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartRecordingResponse)
	err := c.cc.Invoke(ctx, TelephonyActionService_StartRecording_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telephonyActionServiceClient) StopRecording(ctx context.Context, in *StopRecordingRequest, opts ...grpc.CallOption) (*StopRecordingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopRecordingResponse)
	err := c.cc.Invoke(ctx, TelephonyActionService_StopRecording_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelephonyActionServiceServer is the server API for TelephonyActionService service.
// All implementations should embed UnimplementedTelephonyActionServiceServer
// for forward compatibility.
type TelephonyActionServiceServer interface {
	PlayAudio(context.Context, *PlayAudioRequest) (*PlayAudioResponse, error)
	TerminateCall(context.Context, *TerminateCallRequest) (*TerminateCallResponse, error)
	SendTextMessage(context.Context, *SendTextMessageRequest) (*SendTextMessageResponse, error)
	StartRecording(context.Context, *StartRecordingRequest) (*StartRecordingResponse, error)
	StopRecording(context.Context, *StopRecordingRequest) (*StopRecordingResponse, error)
}

// UnimplementedTelephonyActionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTelephonyActionServiceServer struct{}

func (UnimplementedTelephonyActionServiceServer) PlayAudio(context.Context, *PlayAudioRequest) (*PlayAudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayAudio not implemented")
}
func (UnimplementedTelephonyActionServiceServer) TerminateCall(context.Context, *TerminateCallRequest) (*TerminateCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateCall not implemented")
}
func (UnimplementedTelephonyActionServiceServer) SendTextMessage(context.Context, *SendTextMessageRequest) (*SendTextMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTextMessage not implemented")
}
func (UnimplementedTelephonyActionServiceServer) StartRecording(context.Context, *StartRecordingRequest) (*StartRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecording not implemented")
}
func (UnimplementedTelephonyActionServiceServer) StopRecording(context.Context, *StopRecordingRequest) (*StopRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecording not implemented")
}
func (UnimplementedTelephonyActionServiceServer) testEmbeddedByValue() {}

// UnsafeTelephonyActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelephonyActionServiceServer will
// result in compilation errors.
type UnsafeTelephonyActionServiceServer interface {
	mustEmbedUnimplementedTelephonyActionServiceServer()
}

func RegisterTelephonyActionServiceServer(s grpc.ServiceRegistrar, srv TelephonyActionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTelephonyActionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TelephonyActionService_ServiceDesc, srv)
}

func _TelephonyActionService_PlayAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelephonyActionServiceServer).PlayAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelephonyActionService_PlayAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelephonyActionServiceServer).PlayAudio(ctx, req.(*PlayAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelephonyActionService_TerminateCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelephonyActionServiceServer).TerminateCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelephonyActionService_TerminateCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelephonyActionServiceServer).TerminateCall(ctx, req.(*TerminateCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelephonyActionService_SendTextMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTextMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelephonyActionServiceServer).SendTextMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelephonyActionService_SendTextMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelephonyActionServiceServer).SendTextMessage(ctx, req.(*SendTextMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelephonyActionService_StartRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelephonyActionServiceServer).StartRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelephonyActionService_StartRecording_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelephonyActionServiceServer).StartRecording(ctx, req.(*StartRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelephonyActionService_StopRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelephonyActionServiceServer).StopRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelephonyActionService_StopRecording_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelephonyActionServiceServer).StopRecording(ctx, req.(*StopRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelephonyActionService_ServiceDesc is the grpc.ServiceDesc for TelephonyActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelephonyActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentiric.telephony.v1.TelephonyActionService",
	HandlerType: (*TelephonyActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayAudio",
			Handler:    _TelephonyActionService_PlayAudio_Handler,
		},
		{
			MethodName: "TerminateCall",
			Handler:    _TelephonyActionService_TerminateCall_Handler,
		},
		{
			MethodName: "SendTextMessage",
			Handler:    _TelephonyActionService_SendTextMessage_Handler,
		},
		{
			MethodName: "StartRecording",
			Handler:    _TelephonyActionService_StartRecording_Handler,
		},
		{
			MethodName: "StopRecording",
			Handler:    _TelephonyActionService_StopRecording_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentiric/telephony/v1/action.proto",
}
