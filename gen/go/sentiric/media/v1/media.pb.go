// DOSYA: sentiric-contracts/proto/sentiric/media/v1/media.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: sentiric/media/v1/media.proto

package mediav1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AllocatePortRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CallId        string                 `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllocatePortRequest) Reset() {
	*x = AllocatePortRequest{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocatePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatePortRequest) ProtoMessage() {}

func (x *AllocatePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatePortRequest.ProtoReflect.Descriptor instead.
func (*AllocatePortRequest) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{0}
}

func (x *AllocatePortRequest) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

type AllocatePortResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RtpPort       uint32                 `protobuf:"varint,1,opt,name=rtp_port,json=rtpPort,proto3" json:"rtp_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllocatePortResponse) Reset() {
	*x = AllocatePortResponse{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocatePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatePortResponse) ProtoMessage() {}

func (x *AllocatePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatePortResponse.ProtoReflect.Descriptor instead.
func (*AllocatePortResponse) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{1}
}

func (x *AllocatePortResponse) GetRtpPort() uint32 {
	if x != nil {
		return x.RtpPort
	}
	return 0
}

type ReleasePortRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RtpPort       uint32                 `protobuf:"varint,1,opt,name=rtp_port,json=rtpPort,proto3" json:"rtp_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleasePortRequest) Reset() {
	*x = ReleasePortRequest{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleasePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePortRequest) ProtoMessage() {}

func (x *ReleasePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePortRequest.ProtoReflect.Descriptor instead.
func (*ReleasePortRequest) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{2}
}

func (x *ReleasePortRequest) GetRtpPort() uint32 {
	if x != nil {
		return x.RtpPort
	}
	return 0
}

type ReleasePortResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleasePortResponse) Reset() {
	*x = ReleasePortResponse{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleasePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePortResponse) ProtoMessage() {}

func (x *ReleasePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePortResponse.ProtoReflect.Descriptor instead.
func (*ReleasePortResponse) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{3}
}

func (x *ReleasePortResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PlayAudioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RtpTargetAddr string                 `protobuf:"bytes,1,opt,name=rtp_target_addr,json=rtpTargetAddr,proto3" json:"rtp_target_addr,omitempty"`
	ServerRtpPort uint32                 `protobuf:"varint,2,opt,name=server_rtp_port,json=serverRtpPort,proto3" json:"server_rtp_port,omitempty"`
	AudioUri      string                 `protobuf:"bytes,3,opt,name=audio_uri,json=audioUri,proto3" json:"audio_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayAudioRequest) Reset() {
	*x = PlayAudioRequest{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayAudioRequest) ProtoMessage() {}

func (x *PlayAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayAudioRequest.ProtoReflect.Descriptor instead.
func (*PlayAudioRequest) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{4}
}

func (x *PlayAudioRequest) GetRtpTargetAddr() string {
	if x != nil {
		return x.RtpTargetAddr
	}
	return ""
}

func (x *PlayAudioRequest) GetServerRtpPort() uint32 {
	if x != nil {
		return x.ServerRtpPort
	}
	return 0
}

func (x *PlayAudioRequest) GetAudioUri() string {
	if x != nil {
		return x.AudioUri
	}
	return ""
}

type PlayAudioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayAudioResponse) Reset() {
	*x = PlayAudioResponse{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayAudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayAudioResponse) ProtoMessage() {}

func (x *PlayAudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayAudioResponse.ProtoReflect.Descriptor instead.
func (*PlayAudioResponse) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{5}
}

func (x *PlayAudioResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PlayAudioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RecordAudioRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServerRtpPort    uint32                 `protobuf:"varint,1,opt,name=server_rtp_port,json=serverRtpPort,proto3" json:"server_rtp_port,omitempty"`
	TargetSampleRate *uint32                `protobuf:"varint,2,opt,name=target_sample_rate,json=targetSampleRate,proto3,oneof" json:"target_sample_rate,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RecordAudioRequest) Reset() {
	*x = RecordAudioRequest{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordAudioRequest) ProtoMessage() {}

func (x *RecordAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordAudioRequest.ProtoReflect.Descriptor instead.
func (*RecordAudioRequest) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{6}
}

func (x *RecordAudioRequest) GetServerRtpPort() uint32 {
	if x != nil {
		return x.ServerRtpPort
	}
	return 0
}

func (x *RecordAudioRequest) GetTargetSampleRate() uint32 {
	if x != nil && x.TargetSampleRate != nil {
		return *x.TargetSampleRate
	}
	return 0
}

type RecordAudioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AudioData     []byte                 `protobuf:"bytes,1,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`
	MediaType     string                 `protobuf:"bytes,2,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordAudioResponse) Reset() {
	*x = RecordAudioResponse{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordAudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordAudioResponse) ProtoMessage() {}

func (x *RecordAudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordAudioResponse.ProtoReflect.Descriptor instead.
func (*RecordAudioResponse) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{7}
}

func (x *RecordAudioResponse) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

func (x *RecordAudioResponse) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

type StartRecordingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerRtpPort uint32                 `protobuf:"varint,1,opt,name=server_rtp_port,json=serverRtpPort,proto3" json:"server_rtp_port,omitempty"`
	OutputUri     string                 `protobuf:"bytes,2,opt,name=output_uri,json=outputUri,proto3" json:"output_uri,omitempty"`
	SampleRate    *uint32                `protobuf:"varint,3,opt,name=sample_rate,json=sampleRate,proto3,oneof" json:"sample_rate,omitempty"`
	Format        *string                `protobuf:"bytes,4,opt,name=format,proto3,oneof" json:"format,omitempty"`
	CallId        string                 `protobuf:"bytes,5,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	TraceId       string                 `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRecordingRequest) Reset() {
	*x = StartRecordingRequest{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRecordingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRecordingRequest) ProtoMessage() {}

func (x *StartRecordingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRecordingRequest.ProtoReflect.Descriptor instead.
func (*StartRecordingRequest) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{8}
}

func (x *StartRecordingRequest) GetServerRtpPort() uint32 {
	if x != nil {
		return x.ServerRtpPort
	}
	return 0
}

func (x *StartRecordingRequest) GetOutputUri() string {
	if x != nil {
		return x.OutputUri
	}
	return ""
}

func (x *StartRecordingRequest) GetSampleRate() uint32 {
	if x != nil && x.SampleRate != nil {
		return *x.SampleRate
	}
	return 0
}

func (x *StartRecordingRequest) GetFormat() string {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ""
}

func (x *StartRecordingRequest) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *StartRecordingRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type StartRecordingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRecordingResponse) Reset() {
	*x = StartRecordingResponse{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRecordingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRecordingResponse) ProtoMessage() {}

func (x *StartRecordingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRecordingResponse.ProtoReflect.Descriptor instead.
func (*StartRecordingResponse) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{9}
}

func (x *StartRecordingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type StopRecordingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerRtpPort uint32                 `protobuf:"varint,1,opt,name=server_rtp_port,json=serverRtpPort,proto3" json:"server_rtp_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRecordingRequest) Reset() {
	*x = StopRecordingRequest{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRecordingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRecordingRequest) ProtoMessage() {}

func (x *StopRecordingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRecordingRequest.ProtoReflect.Descriptor instead.
func (*StopRecordingRequest) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{10}
}

func (x *StopRecordingRequest) GetServerRtpPort() uint32 {
	if x != nil {
		return x.ServerRtpPort
	}
	return 0
}

type StopRecordingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRecordingResponse) Reset() {
	*x = StopRecordingResponse{}
	mi := &file_sentiric_media_v1_media_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRecordingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRecordingResponse) ProtoMessage() {}

func (x *StopRecordingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_media_v1_media_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRecordingResponse.ProtoReflect.Descriptor instead.
func (*StopRecordingResponse) Descriptor() ([]byte, []int) {
	return file_sentiric_media_v1_media_proto_rawDescGZIP(), []int{11}
}

func (x *StopRecordingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_sentiric_media_v1_media_proto protoreflect.FileDescriptor

const file_sentiric_media_v1_media_proto_rawDesc = "" +
	"\n" +
	"\x1dsentiric/media/v1/media.proto\x12\x11sentiric.media.v1\".\n" +
	"\x13AllocatePortRequest\x12\x17\n" +
	"\acall_id\x18\x01 \x01(\tR\x06callId\"1\n" +
	"\x14AllocatePortResponse\x12\x19\n" +
	"\brtp_port\x18\x01 \x01(\rR\artpPort\"/\n" +
	"\x12ReleasePortRequest\x12\x19\n" +
	"\brtp_port\x18\x01 \x01(\rR\artpPort\"/\n" +
	"\x13ReleasePortResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\x7f\n" +
	"\x10PlayAudioRequest\x12&\n" +
	"\x0frtp_target_addr\x18\x01 \x01(\tR\rrtpTargetAddr\x12&\n" +
	"\x0fserver_rtp_port\x18\x02 \x01(\rR\rserverRtpPort\x12\x1b\n" +
	"\taudio_uri\x18\x03 \x01(\tR\baudioUri\"G\n" +
	"\x11PlayAudioResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x86\x01\n" +
	"\x12RecordAudioRequest\x12&\n" +
	"\x0fserver_rtp_port\x18\x01 \x01(\rR\rserverRtpPort\x121\n" +
	"\x12target_sample_rate\x18\x02 \x01(\rH\x00R\x10targetSampleRate\x88\x01\x01B\x15\n" +
	"\x13_target_sample_rate\"S\n" +
	"\x13RecordAudioResponse\x12\x1d\n" +
	"\n" +
	"audio_data\x18\x01 \x01(\fR\taudioData\x12\x1d\n" +
	"\n" +
	"media_type\x18\x02 \x01(\tR\tmediaType\"\xf0\x01\n" +
	"\x15StartRecordingRequest\x12&\n" +
	"\x0fserver_rtp_port\x18\x01 \x01(\rR\rserverRtpPort\x12\x1d\n" +
	"\n" +
	"output_uri\x18\x02 \x01(\tR\toutputUri\x12$\n" +
	"\vsample_rate\x18\x03 \x01(\rH\x00R\n" +
	"sampleRate\x88\x01\x01\x12\x1b\n" +
	"\x06format\x18\x04 \x01(\tH\x01R\x06format\x88\x01\x01\x12\x17\n" +
	"\acall_id\x18\x05 \x01(\tR\x06callId\x12\x19\n" +
	"\btrace_id\x18\x06 \x01(\tR\atraceIdB\x0e\n" +
	"\f_sample_rateB\t\n" +
	"\a_format\"2\n" +
	"\x16StartRecordingResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\">\n" +
	"\x14StopRecordingRequest\x12&\n" +
	"\x0fserver_rtp_port\x18\x01 \x01(\rR\rserverRtpPort\"1\n" +
	"\x15StopRecordingResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2\xd0\x04\n" +
	"\fMediaService\x12_\n" +
	"\fAllocatePort\x12&.sentiric.media.v1.AllocatePortRequest\x1a'.sentiric.media.v1.AllocatePortResponse\x12\\\n" +
	"\vReleasePort\x12%.sentiric.media.v1.ReleasePortRequest\x1a&.sentiric.media.v1.ReleasePortResponse\x12V\n" +
	"\tPlayAudio\x12#.sentiric.media.v1.PlayAudioRequest\x1a$.sentiric.media.v1.PlayAudioResponse\x12^\n" +
	"\vRecordAudio\x12%.sentiric.media.v1.RecordAudioRequest\x1a&.sentiric.media.v1.RecordAudioResponse0\x01\x12e\n" +
	"\x0eStartRecording\x12(.sentiric.media.v1.StartRecordingRequest\x1a).sentiric.media.v1.StartRecordingResponse\x12b\n" +
	"\rStopRecording\x12'.sentiric.media.v1.StopRecordingRequest\x1a(.sentiric.media.v1.StopRecordingResponseBIZGgithub.com/sentiric/sentiric-contracts/gen/go/sentiric/media/v1;mediav1b\x06proto3"

var (
	file_sentiric_media_v1_media_proto_rawDescOnce sync.Once
	file_sentiric_media_v1_media_proto_rawDescData []byte
)

func file_sentiric_media_v1_media_proto_rawDescGZIP() []byte {
	file_sentiric_media_v1_media_proto_rawDescOnce.Do(func() {
		file_sentiric_media_v1_media_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sentiric_media_v1_media_proto_rawDesc), len(file_sentiric_media_v1_media_proto_rawDesc)))
	})
	return file_sentiric_media_v1_media_proto_rawDescData
}

var file_sentiric_media_v1_media_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_sentiric_media_v1_media_proto_goTypes = []any{
	(*AllocatePortRequest)(nil),    // 0: sentiric.media.v1.AllocatePortRequest
	(*AllocatePortResponse)(nil),   // 1: sentiric.media.v1.AllocatePortResponse
	(*ReleasePortRequest)(nil),     // 2: sentiric.media.v1.ReleasePortRequest
	(*ReleasePortResponse)(nil),    // 3: sentiric.media.v1.ReleasePortResponse
	(*PlayAudioRequest)(nil),       // 4: sentiric.media.v1.PlayAudioRequest
	(*PlayAudioResponse)(nil),      // 5: sentiric.media.v1.PlayAudioResponse
	(*RecordAudioRequest)(nil),     // 6: sentiric.media.v1.RecordAudioRequest
	(*RecordAudioResponse)(nil),    // 7: sentiric.media.v1.RecordAudioResponse
	(*StartRecordingRequest)(nil),  // 8: sentiric.media.v1.StartRecordingRequest
	(*StartRecordingResponse)(nil), // 9: sentiric.media.v1.StartRecordingResponse
	(*StopRecordingRequest)(nil),   // 10: sentiric.media.v1.StopRecordingRequest
	(*StopRecordingResponse)(nil),  // 11: sentiric.media.v1.StopRecordingResponse
}
var file_sentiric_media_v1_media_proto_depIdxs = []int32{
	0,  // 0: sentiric.media.v1.MediaService.AllocatePort:input_type -> sentiric.media.v1.AllocatePortRequest
	2,  // 1: sentiric.media.v1.MediaService.ReleasePort:input_type -> sentiric.media.v1.ReleasePortRequest
	4,  // 2: sentiric.media.v1.MediaService.PlayAudio:input_type -> sentiric.media.v1.PlayAudioRequest
	6,  // 3: sentiric.media.v1.MediaService.RecordAudio:input_type -> sentiric.media.v1.RecordAudioRequest
	8,  // 4: sentiric.media.v1.MediaService.StartRecording:input_type -> sentiric.media.v1.StartRecordingRequest
	10, // 5: sentiric.media.v1.MediaService.StopRecording:input_type -> sentiric.media.v1.StopRecordingRequest
	1,  // 6: sentiric.media.v1.MediaService.AllocatePort:output_type -> sentiric.media.v1.AllocatePortResponse
	3,  // 7: sentiric.media.v1.MediaService.ReleasePort:output_type -> sentiric.media.v1.ReleasePortResponse
	5,  // 8: sentiric.media.v1.MediaService.PlayAudio:output_type -> sentiric.media.v1.PlayAudioResponse
	7,  // 9: sentiric.media.v1.MediaService.RecordAudio:output_type -> sentiric.media.v1.RecordAudioResponse
	9,  // 10: sentiric.media.v1.MediaService.StartRecording:output_type -> sentiric.media.v1.StartRecordingResponse
	11, // 11: sentiric.media.v1.MediaService.StopRecording:output_type -> sentiric.media.v1.StopRecordingResponse
	6,  // [6:12] is the sub-list for method output_type
	0,  // [0:6] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_sentiric_media_v1_media_proto_init() }
func file_sentiric_media_v1_media_proto_init() {
	if File_sentiric_media_v1_media_proto != nil {
		return
	}
	file_sentiric_media_v1_media_proto_msgTypes[6].OneofWrappers = []any{}
	file_sentiric_media_v1_media_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sentiric_media_v1_media_proto_rawDesc), len(file_sentiric_media_v1_media_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sentiric_media_v1_media_proto_goTypes,
		DependencyIndexes: file_sentiric_media_v1_media_proto_depIdxs,
		MessageInfos:      file_sentiric_media_v1_media_proto_msgTypes,
	}.Build()
	File_sentiric_media_v1_media_proto = out.File
	file_sentiric_media_v1_media_proto_goTypes = nil
	file_sentiric_media_v1_media_proto_depIdxs = nil
}
