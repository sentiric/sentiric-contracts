// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sentiric/tts/v1/edge.proto

package ttsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TtsEdgeService_EdgeSynthesize_FullMethodName = "/sentiric.tts.v1.TtsEdgeService/EdgeSynthesize"
)

// TtsEdgeServiceClient is the client API for TtsEdgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TtsEdgeService, TTS motorlarından birine özgü düşük seviyeli kontrat.
type TtsEdgeServiceClient interface {
	EdgeSynthesize(ctx context.Context, in *EdgeSynthesizeRequest, opts ...grpc.CallOption) (*EdgeSynthesizeResponse, error)
}

type ttsEdgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTtsEdgeServiceClient(cc grpc.ClientConnInterface) TtsEdgeServiceClient {
	return &ttsEdgeServiceClient{cc}
}

func (c *ttsEdgeServiceClient) EdgeSynthesize(ctx context.Context, in *EdgeSynthesizeRequest, opts ...grpc.CallOption) (*EdgeSynthesizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EdgeSynthesizeResponse)
	err := c.cc.Invoke(ctx, TtsEdgeService_EdgeSynthesize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TtsEdgeServiceServer is the server API for TtsEdgeService service.
// All implementations should embed UnimplementedTtsEdgeServiceServer
// for forward compatibility.
//
// TtsEdgeService, TTS motorlarından birine özgü düşük seviyeli kontrat.
type TtsEdgeServiceServer interface {
	EdgeSynthesize(context.Context, *EdgeSynthesizeRequest) (*EdgeSynthesizeResponse, error)
}

// UnimplementedTtsEdgeServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTtsEdgeServiceServer struct{}

func (UnimplementedTtsEdgeServiceServer) EdgeSynthesize(context.Context, *EdgeSynthesizeRequest) (*EdgeSynthesizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EdgeSynthesize not implemented")
}
func (UnimplementedTtsEdgeServiceServer) testEmbeddedByValue() {}

// UnsafeTtsEdgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TtsEdgeServiceServer will
// result in compilation errors.
type UnsafeTtsEdgeServiceServer interface {
	mustEmbedUnimplementedTtsEdgeServiceServer()
}

func RegisterTtsEdgeServiceServer(s grpc.ServiceRegistrar, srv TtsEdgeServiceServer) {
	// If the following call pancis, it indicates UnimplementedTtsEdgeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TtsEdgeService_ServiceDesc, srv)
}

func _TtsEdgeService_EdgeSynthesize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeSynthesizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsEdgeServiceServer).EdgeSynthesize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TtsEdgeService_EdgeSynthesize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsEdgeServiceServer).EdgeSynthesize(ctx, req.(*EdgeSynthesizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TtsEdgeService_ServiceDesc is the grpc.ServiceDesc for TtsEdgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TtsEdgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentiric.tts.v1.TtsEdgeService",
	HandlerType: (*TtsEdgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EdgeSynthesize",
			Handler:    _TtsEdgeService_EdgeSynthesize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentiric/tts/v1/edge.proto",
}
