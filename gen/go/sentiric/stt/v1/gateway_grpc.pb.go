// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sentiric/stt/v1/gateway.proto

package sttv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SttGatewayService_Transcribe_FullMethodName       = "/sentiric.stt.v1.SttGatewayService/Transcribe"
	SttGatewayService_TranscribeStream_FullMethodName = "/sentiric.stt.v1.SttGatewayService/TranscribeStream"
)

// SttGatewayServiceClient is the client API for SttGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SttGatewayServiceClient interface {
	Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (*TranscribeResponse, error)
	TranscribeStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TranscribeStreamRequest, TranscribeStreamResponse], error)
}

type sttGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSttGatewayServiceClient(cc grpc.ClientConnInterface) SttGatewayServiceClient {
	return &sttGatewayServiceClient{cc}
}

func (c *sttGatewayServiceClient) Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (*TranscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscribeResponse)
	err := c.cc.Invoke(ctx, SttGatewayService_Transcribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sttGatewayServiceClient) TranscribeStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TranscribeStreamRequest, TranscribeStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SttGatewayService_ServiceDesc.Streams[0], SttGatewayService_TranscribeStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TranscribeStreamRequest, TranscribeStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SttGatewayService_TranscribeStreamClient = grpc.BidiStreamingClient[TranscribeStreamRequest, TranscribeStreamResponse]

// SttGatewayServiceServer is the server API for SttGatewayService service.
// All implementations should embed UnimplementedSttGatewayServiceServer
// for forward compatibility.
type SttGatewayServiceServer interface {
	Transcribe(context.Context, *TranscribeRequest) (*TranscribeResponse, error)
	TranscribeStream(grpc.BidiStreamingServer[TranscribeStreamRequest, TranscribeStreamResponse]) error
}

// UnimplementedSttGatewayServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSttGatewayServiceServer struct{}

func (UnimplementedSttGatewayServiceServer) Transcribe(context.Context, *TranscribeRequest) (*TranscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transcribe not implemented")
}
func (UnimplementedSttGatewayServiceServer) TranscribeStream(grpc.BidiStreamingServer[TranscribeStreamRequest, TranscribeStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TranscribeStream not implemented")
}
func (UnimplementedSttGatewayServiceServer) testEmbeddedByValue() {}

// UnsafeSttGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SttGatewayServiceServer will
// result in compilation errors.
type UnsafeSttGatewayServiceServer interface {
	mustEmbedUnimplementedSttGatewayServiceServer()
}

func RegisterSttGatewayServiceServer(s grpc.ServiceRegistrar, srv SttGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedSttGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SttGatewayService_ServiceDesc, srv)
}

func _SttGatewayService_Transcribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SttGatewayServiceServer).Transcribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SttGatewayService_Transcribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SttGatewayServiceServer).Transcribe(ctx, req.(*TranscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SttGatewayService_TranscribeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SttGatewayServiceServer).TranscribeStream(&grpc.GenericServerStream[TranscribeStreamRequest, TranscribeStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SttGatewayService_TranscribeStreamServer = grpc.BidiStreamingServer[TranscribeStreamRequest, TranscribeStreamResponse]

// SttGatewayService_ServiceDesc is the grpc.ServiceDesc for SttGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SttGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentiric.stt.v1.SttGatewayService",
	HandlerType: (*SttGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transcribe",
			Handler:    _SttGatewayService_Transcribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TranscribeStream",
			Handler:       _SttGatewayService_TranscribeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sentiric/stt/v1/gateway.proto",
}
