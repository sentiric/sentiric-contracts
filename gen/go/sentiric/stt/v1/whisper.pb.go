// File: proto/sentiric/stt/v1/whisper.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: sentiric/stt/v1/whisper.proto

package sttv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Dosya tabanlı transkripsiyon için mesajlar
type WhisperTranscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AudioData     []byte                 `protobuf:"bytes,1,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`
	Language      *string                `protobuf:"bytes,2,opt,name=language,proto3,oneof" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhisperTranscribeRequest) Reset() {
	*x = WhisperTranscribeRequest{}
	mi := &file_sentiric_stt_v1_whisper_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhisperTranscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhisperTranscribeRequest) ProtoMessage() {}

func (x *WhisperTranscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_stt_v1_whisper_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhisperTranscribeRequest.ProtoReflect.Descriptor instead.
func (*WhisperTranscribeRequest) Descriptor() ([]byte, []int) {
	return file_sentiric_stt_v1_whisper_proto_rawDescGZIP(), []int{0}
}

func (x *WhisperTranscribeRequest) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

func (x *WhisperTranscribeRequest) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type WhisperTranscribeResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Transcription       string                 `protobuf:"bytes,1,opt,name=transcription,proto3" json:"transcription,omitempty"`
	Language            string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	LanguageProbability float32                `protobuf:"fixed32,3,opt,name=language_probability,json=languageProbability,proto3" json:"language_probability,omitempty"`
	Duration            float64                `protobuf:"fixed64,4,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *WhisperTranscribeResponse) Reset() {
	*x = WhisperTranscribeResponse{}
	mi := &file_sentiric_stt_v1_whisper_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhisperTranscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhisperTranscribeResponse) ProtoMessage() {}

func (x *WhisperTranscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_stt_v1_whisper_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhisperTranscribeResponse.ProtoReflect.Descriptor instead.
func (*WhisperTranscribeResponse) Descriptor() ([]byte, []int) {
	return file_sentiric_stt_v1_whisper_proto_rawDescGZIP(), []int{1}
}

func (x *WhisperTranscribeResponse) GetTranscription() string {
	if x != nil {
		return x.Transcription
	}
	return ""
}

func (x *WhisperTranscribeResponse) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *WhisperTranscribeResponse) GetLanguageProbability() float32 {
	if x != nil {
		return x.LanguageProbability
	}
	return 0
}

func (x *WhisperTranscribeResponse) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Akış tabanlı transkripsiyon için mesajlar
type WhisperTranscribeStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ses verisi 16kHz, 16-bit, mono, ham PCM formatında olmalıdır.
	AudioChunk    []byte `protobuf:"bytes,1,opt,name=audio_chunk,json=audioChunk,proto3" json:"audio_chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhisperTranscribeStreamRequest) Reset() {
	*x = WhisperTranscribeStreamRequest{}
	mi := &file_sentiric_stt_v1_whisper_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhisperTranscribeStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhisperTranscribeStreamRequest) ProtoMessage() {}

func (x *WhisperTranscribeStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_stt_v1_whisper_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhisperTranscribeStreamRequest.ProtoReflect.Descriptor instead.
func (*WhisperTranscribeStreamRequest) Descriptor() ([]byte, []int) {
	return file_sentiric_stt_v1_whisper_proto_rawDescGZIP(), []int{2}
}

func (x *WhisperTranscribeStreamRequest) GetAudioChunk() []byte {
	if x != nil {
		return x.AudioChunk
	}
	return nil
}

type WhisperTranscribeStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transcription string                 `protobuf:"bytes,1,opt,name=transcription,proto3" json:"transcription,omitempty"`
	IsFinal       bool                   `protobuf:"varint,2,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"` // Bu segmentin nihai sonuç olup olmadığını belirtir.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhisperTranscribeStreamResponse) Reset() {
	*x = WhisperTranscribeStreamResponse{}
	mi := &file_sentiric_stt_v1_whisper_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhisperTranscribeStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhisperTranscribeStreamResponse) ProtoMessage() {}

func (x *WhisperTranscribeStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_stt_v1_whisper_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhisperTranscribeStreamResponse.ProtoReflect.Descriptor instead.
func (*WhisperTranscribeStreamResponse) Descriptor() ([]byte, []int) {
	return file_sentiric_stt_v1_whisper_proto_rawDescGZIP(), []int{3}
}

func (x *WhisperTranscribeStreamResponse) GetTranscription() string {
	if x != nil {
		return x.Transcription
	}
	return ""
}

func (x *WhisperTranscribeStreamResponse) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

var File_sentiric_stt_v1_whisper_proto protoreflect.FileDescriptor

const file_sentiric_stt_v1_whisper_proto_rawDesc = "" +
	"\n" +
	"\x1dsentiric/stt/v1/whisper.proto\x12\x0fsentiric.stt.v1\"g\n" +
	"\x18WhisperTranscribeRequest\x12\x1d\n" +
	"\n" +
	"audio_data\x18\x01 \x01(\fR\taudioData\x12\x1f\n" +
	"\blanguage\x18\x02 \x01(\tH\x00R\blanguage\x88\x01\x01B\v\n" +
	"\t_language\"\xac\x01\n" +
	"\x19WhisperTranscribeResponse\x12$\n" +
	"\rtranscription\x18\x01 \x01(\tR\rtranscription\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x121\n" +
	"\x14language_probability\x18\x03 \x01(\x02R\x13languageProbability\x12\x1a\n" +
	"\bduration\x18\x04 \x01(\x01R\bduration\"A\n" +
	"\x1eWhisperTranscribeStreamRequest\x12\x1f\n" +
	"\vaudio_chunk\x18\x01 \x01(\fR\n" +
	"audioChunk\"b\n" +
	"\x1fWhisperTranscribeStreamResponse\x12$\n" +
	"\rtranscription\x18\x01 \x01(\tR\rtranscription\x12\x19\n" +
	"\bis_final\x18\x02 \x01(\bR\aisFinal2\x82\x02\n" +
	"\x11SttWhisperService\x12j\n" +
	"\x11WhisperTranscribe\x12).sentiric.stt.v1.WhisperTranscribeRequest\x1a*.sentiric.stt.v1.WhisperTranscribeResponse\x12\x80\x01\n" +
	"\x17WhisperTranscribeStream\x12/.sentiric.stt.v1.WhisperTranscribeStreamRequest\x1a0.sentiric.stt.v1.WhisperTranscribeStreamResponse(\x010\x01BEZCgithub.com/sentiric/sentiric-contracts/gen/go/sentiric/stt/v1;sttv1b\x06proto3"

var (
	file_sentiric_stt_v1_whisper_proto_rawDescOnce sync.Once
	file_sentiric_stt_v1_whisper_proto_rawDescData []byte
)

func file_sentiric_stt_v1_whisper_proto_rawDescGZIP() []byte {
	file_sentiric_stt_v1_whisper_proto_rawDescOnce.Do(func() {
		file_sentiric_stt_v1_whisper_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sentiric_stt_v1_whisper_proto_rawDesc), len(file_sentiric_stt_v1_whisper_proto_rawDesc)))
	})
	return file_sentiric_stt_v1_whisper_proto_rawDescData
}

var file_sentiric_stt_v1_whisper_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sentiric_stt_v1_whisper_proto_goTypes = []any{
	(*WhisperTranscribeRequest)(nil),        // 0: sentiric.stt.v1.WhisperTranscribeRequest
	(*WhisperTranscribeResponse)(nil),       // 1: sentiric.stt.v1.WhisperTranscribeResponse
	(*WhisperTranscribeStreamRequest)(nil),  // 2: sentiric.stt.v1.WhisperTranscribeStreamRequest
	(*WhisperTranscribeStreamResponse)(nil), // 3: sentiric.stt.v1.WhisperTranscribeStreamResponse
}
var file_sentiric_stt_v1_whisper_proto_depIdxs = []int32{
	0, // 0: sentiric.stt.v1.SttWhisperService.WhisperTranscribe:input_type -> sentiric.stt.v1.WhisperTranscribeRequest
	2, // 1: sentiric.stt.v1.SttWhisperService.WhisperTranscribeStream:input_type -> sentiric.stt.v1.WhisperTranscribeStreamRequest
	1, // 2: sentiric.stt.v1.SttWhisperService.WhisperTranscribe:output_type -> sentiric.stt.v1.WhisperTranscribeResponse
	3, // 3: sentiric.stt.v1.SttWhisperService.WhisperTranscribeStream:output_type -> sentiric.stt.v1.WhisperTranscribeStreamResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sentiric_stt_v1_whisper_proto_init() }
func file_sentiric_stt_v1_whisper_proto_init() {
	if File_sentiric_stt_v1_whisper_proto != nil {
		return
	}
	file_sentiric_stt_v1_whisper_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sentiric_stt_v1_whisper_proto_rawDesc), len(file_sentiric_stt_v1_whisper_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sentiric_stt_v1_whisper_proto_goTypes,
		DependencyIndexes: file_sentiric_stt_v1_whisper_proto_depIdxs,
		MessageInfos:      file_sentiric_stt_v1_whisper_proto_msgTypes,
	}.Build()
	File_sentiric_stt_v1_whisper_proto = out.File
	file_sentiric_stt_v1_whisper_proto_goTypes = nil
	file_sentiric_stt_v1_whisper_proto_depIdxs = nil
}
