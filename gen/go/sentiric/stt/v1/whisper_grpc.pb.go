// File: proto/sentiric/stt/v1/whisper.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sentiric/stt/v1/whisper.proto

package sttv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SttWhisperService_WhisperTranscribe_FullMethodName       = "/sentiric.stt.v1.SttWhisperService/WhisperTranscribe"
	SttWhisperService_WhisperTranscribeStream_FullMethodName = "/sentiric.stt.v1.SttWhisperService/WhisperTranscribeStream"
)

// SttWhisperServiceClient is the client API for SttWhisperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SttWhisperService, Whisper motoruna özgü düşük seviyeli kontrat.
type SttWhisperServiceClient interface {
	// Bir ses dosyasının tamamını tek seferde metne çevirir.
	WhisperTranscribe(ctx context.Context, in *WhisperTranscribeRequest, opts ...grpc.CallOption) (*WhisperTranscribeResponse, error)
	// Gerçek zamanlı bir ses akışını metne çevirir.
	WhisperTranscribeStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WhisperTranscribeStreamRequest, WhisperTranscribeStreamResponse], error)
}

type sttWhisperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSttWhisperServiceClient(cc grpc.ClientConnInterface) SttWhisperServiceClient {
	return &sttWhisperServiceClient{cc}
}

func (c *sttWhisperServiceClient) WhisperTranscribe(ctx context.Context, in *WhisperTranscribeRequest, opts ...grpc.CallOption) (*WhisperTranscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhisperTranscribeResponse)
	err := c.cc.Invoke(ctx, SttWhisperService_WhisperTranscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sttWhisperServiceClient) WhisperTranscribeStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WhisperTranscribeStreamRequest, WhisperTranscribeStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SttWhisperService_ServiceDesc.Streams[0], SttWhisperService_WhisperTranscribeStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WhisperTranscribeStreamRequest, WhisperTranscribeStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SttWhisperService_WhisperTranscribeStreamClient = grpc.BidiStreamingClient[WhisperTranscribeStreamRequest, WhisperTranscribeStreamResponse]

// SttWhisperServiceServer is the server API for SttWhisperService service.
// All implementations should embed UnimplementedSttWhisperServiceServer
// for forward compatibility.
//
// SttWhisperService, Whisper motoruna özgü düşük seviyeli kontrat.
type SttWhisperServiceServer interface {
	// Bir ses dosyasının tamamını tek seferde metne çevirir.
	WhisperTranscribe(context.Context, *WhisperTranscribeRequest) (*WhisperTranscribeResponse, error)
	// Gerçek zamanlı bir ses akışını metne çevirir.
	WhisperTranscribeStream(grpc.BidiStreamingServer[WhisperTranscribeStreamRequest, WhisperTranscribeStreamResponse]) error
}

// UnimplementedSttWhisperServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSttWhisperServiceServer struct{}

func (UnimplementedSttWhisperServiceServer) WhisperTranscribe(context.Context, *WhisperTranscribeRequest) (*WhisperTranscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhisperTranscribe not implemented")
}
func (UnimplementedSttWhisperServiceServer) WhisperTranscribeStream(grpc.BidiStreamingServer[WhisperTranscribeStreamRequest, WhisperTranscribeStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WhisperTranscribeStream not implemented")
}
func (UnimplementedSttWhisperServiceServer) testEmbeddedByValue() {}

// UnsafeSttWhisperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SttWhisperServiceServer will
// result in compilation errors.
type UnsafeSttWhisperServiceServer interface {
	mustEmbedUnimplementedSttWhisperServiceServer()
}

func RegisterSttWhisperServiceServer(s grpc.ServiceRegistrar, srv SttWhisperServiceServer) {
	// If the following call pancis, it indicates UnimplementedSttWhisperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SttWhisperService_ServiceDesc, srv)
}

func _SttWhisperService_WhisperTranscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhisperTranscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SttWhisperServiceServer).WhisperTranscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SttWhisperService_WhisperTranscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SttWhisperServiceServer).WhisperTranscribe(ctx, req.(*WhisperTranscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SttWhisperService_WhisperTranscribeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SttWhisperServiceServer).WhisperTranscribeStream(&grpc.GenericServerStream[WhisperTranscribeStreamRequest, WhisperTranscribeStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SttWhisperService_WhisperTranscribeStreamServer = grpc.BidiStreamingServer[WhisperTranscribeStreamRequest, WhisperTranscribeStreamResponse]

// SttWhisperService_ServiceDesc is the grpc.ServiceDesc for SttWhisperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SttWhisperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentiric.stt.v1.SttWhisperService",
	HandlerType: (*SttWhisperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhisperTranscribe",
			Handler:    _SttWhisperService_WhisperTranscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WhisperTranscribeStream",
			Handler:       _SttWhisperService_WhisperTranscribeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sentiric/stt/v1/whisper.proto",
}
