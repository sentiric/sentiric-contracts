// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: sentiric/control/v1/license.proto

package controlv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VerifyFeatureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	FeatureName   string                 `protobuf:"bytes,2,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyFeatureRequest) Reset() {
	*x = VerifyFeatureRequest{}
	mi := &file_sentiric_control_v1_license_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyFeatureRequest) ProtoMessage() {}

func (x *VerifyFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_control_v1_license_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyFeatureRequest.ProtoReflect.Descriptor instead.
func (*VerifyFeatureRequest) Descriptor() ([]byte, []int) {
	return file_sentiric_control_v1_license_proto_rawDescGZIP(), []int{0}
}

func (x *VerifyFeatureRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *VerifyFeatureRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

type VerifyFeatureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsLicensed    bool                   `protobuf:"varint,1,opt,name=is_licensed,json=isLicensed,proto3" json:"is_licensed,omitempty"`
	LimitDetails  *string                `protobuf:"bytes,2,opt,name=limit_details,json=limitDetails,proto3,oneof" json:"limit_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyFeatureResponse) Reset() {
	*x = VerifyFeatureResponse{}
	mi := &file_sentiric_control_v1_license_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyFeatureResponse) ProtoMessage() {}

func (x *VerifyFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiric_control_v1_license_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyFeatureResponse.ProtoReflect.Descriptor instead.
func (*VerifyFeatureResponse) Descriptor() ([]byte, []int) {
	return file_sentiric_control_v1_license_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyFeatureResponse) GetIsLicensed() bool {
	if x != nil {
		return x.IsLicensed
	}
	return false
}

func (x *VerifyFeatureResponse) GetLimitDetails() string {
	if x != nil && x.LimitDetails != nil {
		return *x.LimitDetails
	}
	return ""
}

var File_sentiric_control_v1_license_proto protoreflect.FileDescriptor

const file_sentiric_control_v1_license_proto_rawDesc = "" +
	"\n" +
	"!sentiric/control/v1/license.proto\x12\x13sentiric.control.v1\"V\n" +
	"\x14VerifyFeatureRequest\x12\x1b\n" +
	"\ttenant_id\x18\x01 \x01(\tR\btenantId\x12!\n" +
	"\ffeature_name\x18\x02 \x01(\tR\vfeatureName\"t\n" +
	"\x15VerifyFeatureResponse\x12\x1f\n" +
	"\vis_licensed\x18\x01 \x01(\bR\n" +
	"isLicensed\x12(\n" +
	"\rlimit_details\x18\x02 \x01(\tH\x00R\flimitDetails\x88\x01\x01B\x10\n" +
	"\x0e_limit_details2x\n" +
	"\x0eLicenseService\x12f\n" +
	"\rVerifyFeature\x12).sentiric.control.v1.VerifyFeatureRequest\x1a*.sentiric.control.v1.VerifyFeatureResponseBMZKgithub.com/sentiric/sentiric-contracts/gen/go/sentiric/control/v1;controlv1b\x06proto3"

var (
	file_sentiric_control_v1_license_proto_rawDescOnce sync.Once
	file_sentiric_control_v1_license_proto_rawDescData []byte
)

func file_sentiric_control_v1_license_proto_rawDescGZIP() []byte {
	file_sentiric_control_v1_license_proto_rawDescOnce.Do(func() {
		file_sentiric_control_v1_license_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sentiric_control_v1_license_proto_rawDesc), len(file_sentiric_control_v1_license_proto_rawDesc)))
	})
	return file_sentiric_control_v1_license_proto_rawDescData
}

var file_sentiric_control_v1_license_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sentiric_control_v1_license_proto_goTypes = []any{
	(*VerifyFeatureRequest)(nil),  // 0: sentiric.control.v1.VerifyFeatureRequest
	(*VerifyFeatureResponse)(nil), // 1: sentiric.control.v1.VerifyFeatureResponse
}
var file_sentiric_control_v1_license_proto_depIdxs = []int32{
	0, // 0: sentiric.control.v1.LicenseService.VerifyFeature:input_type -> sentiric.control.v1.VerifyFeatureRequest
	1, // 1: sentiric.control.v1.LicenseService.VerifyFeature:output_type -> sentiric.control.v1.VerifyFeatureResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sentiric_control_v1_license_proto_init() }
func file_sentiric_control_v1_license_proto_init() {
	if File_sentiric_control_v1_license_proto != nil {
		return
	}
	file_sentiric_control_v1_license_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sentiric_control_v1_license_proto_rawDesc), len(file_sentiric_control_v1_license_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sentiric_control_v1_license_proto_goTypes,
		DependencyIndexes: file_sentiric_control_v1_license_proto_depIdxs,
		MessageInfos:      file_sentiric_control_v1_license_proto_msgTypes,
	}.Build()
	File_sentiric_control_v1_license_proto = out.File
	file_sentiric_control_v1_license_proto_goTypes = nil
	file_sentiric_control_v1_license_proto_depIdxs = nil
}
