// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sentiric/vertical/v1/hospitality.proto

package verticalv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HospitalityService_FindHotels_FullMethodName = "/sentiric.vertical.v1.HospitalityService/FindHotels"
	HospitalityService_BookRoom_FullMethodName   = "/sentiric.vertical.v1.HospitalityService/BookRoom"
)

// HospitalityServiceClient is the client API for HospitalityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HospitalityServiceClient interface {
	FindHotels(ctx context.Context, in *FindHotelsRequest, opts ...grpc.CallOption) (*FindHotelsResponse, error)
	BookRoom(ctx context.Context, in *BookRoomRequest, opts ...grpc.CallOption) (*BookRoomResponse, error)
}

type hospitalityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHospitalityServiceClient(cc grpc.ClientConnInterface) HospitalityServiceClient {
	return &hospitalityServiceClient{cc}
}

func (c *hospitalityServiceClient) FindHotels(ctx context.Context, in *FindHotelsRequest, opts ...grpc.CallOption) (*FindHotelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindHotelsResponse)
	err := c.cc.Invoke(ctx, HospitalityService_FindHotels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalityServiceClient) BookRoom(ctx context.Context, in *BookRoomRequest, opts ...grpc.CallOption) (*BookRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookRoomResponse)
	err := c.cc.Invoke(ctx, HospitalityService_BookRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HospitalityServiceServer is the server API for HospitalityService service.
// All implementations should embed UnimplementedHospitalityServiceServer
// for forward compatibility.
type HospitalityServiceServer interface {
	FindHotels(context.Context, *FindHotelsRequest) (*FindHotelsResponse, error)
	BookRoom(context.Context, *BookRoomRequest) (*BookRoomResponse, error)
}

// UnimplementedHospitalityServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHospitalityServiceServer struct{}

func (UnimplementedHospitalityServiceServer) FindHotels(context.Context, *FindHotelsRequest) (*FindHotelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHotels not implemented")
}
func (UnimplementedHospitalityServiceServer) BookRoom(context.Context, *BookRoomRequest) (*BookRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookRoom not implemented")
}
func (UnimplementedHospitalityServiceServer) testEmbeddedByValue() {}

// UnsafeHospitalityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HospitalityServiceServer will
// result in compilation errors.
type UnsafeHospitalityServiceServer interface {
	mustEmbedUnimplementedHospitalityServiceServer()
}

func RegisterHospitalityServiceServer(s grpc.ServiceRegistrar, srv HospitalityServiceServer) {
	// If the following call pancis, it indicates UnimplementedHospitalityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HospitalityService_ServiceDesc, srv)
}

func _HospitalityService_FindHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHotelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalityServiceServer).FindHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalityService_FindHotels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalityServiceServer).FindHotels(ctx, req.(*FindHotelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalityService_BookRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalityServiceServer).BookRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalityService_BookRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalityServiceServer).BookRoom(ctx, req.(*BookRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HospitalityService_ServiceDesc is the grpc.ServiceDesc for HospitalityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HospitalityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentiric.vertical.v1.HospitalityService",
	HandlerType: (*HospitalityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindHotels",
			Handler:    _HospitalityService_FindHotels_Handler,
		},
		{
			MethodName: "BookRoom",
			Handler:    _HospitalityService_BookRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentiric/vertical/v1/hospitality.proto",
}
