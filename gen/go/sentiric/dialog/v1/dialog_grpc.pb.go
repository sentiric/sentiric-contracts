// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sentiric/dialog/v1/dialog.proto

package dialogv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DialogService_StartDialog_FullMethodName      = "/sentiric.dialog.v1.DialogService/StartDialog"
	DialogService_ProcessUserInput_FullMethodName = "/sentiric.dialog.v1.DialogService/ProcessUserInput"
)

// DialogServiceClient is the client API for DialogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogServiceClient interface {
	StartDialog(ctx context.Context, in *StartDialogRequest, opts ...grpc.CallOption) (*StartDialogResponse, error)
	ProcessUserInput(ctx context.Context, in *ProcessUserInputRequest, opts ...grpc.CallOption) (*ProcessUserInputResponse, error)
}

type dialogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogServiceClient(cc grpc.ClientConnInterface) DialogServiceClient {
	return &dialogServiceClient{cc}
}

func (c *dialogServiceClient) StartDialog(ctx context.Context, in *StartDialogRequest, opts ...grpc.CallOption) (*StartDialogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartDialogResponse)
	err := c.cc.Invoke(ctx, DialogService_StartDialog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) ProcessUserInput(ctx context.Context, in *ProcessUserInputRequest, opts ...grpc.CallOption) (*ProcessUserInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessUserInputResponse)
	err := c.cc.Invoke(ctx, DialogService_ProcessUserInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DialogServiceServer is the server API for DialogService service.
// All implementations should embed UnimplementedDialogServiceServer
// for forward compatibility.
type DialogServiceServer interface {
	StartDialog(context.Context, *StartDialogRequest) (*StartDialogResponse, error)
	ProcessUserInput(context.Context, *ProcessUserInputRequest) (*ProcessUserInputResponse, error)
}

// UnimplementedDialogServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDialogServiceServer struct{}

func (UnimplementedDialogServiceServer) StartDialog(context.Context, *StartDialogRequest) (*StartDialogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDialog not implemented")
}
func (UnimplementedDialogServiceServer) ProcessUserInput(context.Context, *ProcessUserInputRequest) (*ProcessUserInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessUserInput not implemented")
}
func (UnimplementedDialogServiceServer) testEmbeddedByValue() {}

// UnsafeDialogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogServiceServer will
// result in compilation errors.
type UnsafeDialogServiceServer interface {
	mustEmbedUnimplementedDialogServiceServer()
}

func RegisterDialogServiceServer(s grpc.ServiceRegistrar, srv DialogServiceServer) {
	// If the following call pancis, it indicates UnimplementedDialogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DialogService_ServiceDesc, srv)
}

func _DialogService_StartDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).StartDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_StartDialog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).StartDialog(ctx, req.(*StartDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_ProcessUserInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessUserInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).ProcessUserInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogService_ProcessUserInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).ProcessUserInput(ctx, req.(*ProcessUserInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DialogService_ServiceDesc is the grpc.ServiceDesc for DialogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DialogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentiric.dialog.v1.DialogService",
	HandlerType: (*DialogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDialog",
			Handler:    _DialogService_StartDialog_Handler,
		},
		{
			MethodName: "ProcessUserInput",
			Handler:    _DialogService_ProcessUserInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentiric/dialog/v1/dialog.proto",
}
