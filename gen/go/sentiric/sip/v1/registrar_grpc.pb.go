// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sentiric/sip/v1/registrar.proto

package sipv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegistrarService_Register_FullMethodName      = "/sentiric.sip.v1.RegistrarService/Register"
	RegistrarService_Unregister_FullMethodName    = "/sentiric.sip.v1.RegistrarService/Unregister"
	RegistrarService_LookupContact_FullMethodName = "/sentiric.sip.v1.RegistrarService/LookupContact"
)

// RegistrarServiceClient is the client API for RegistrarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RegistrarService, SIP uç noktalarının kaydını yönetir.
type RegistrarServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error)
	LookupContact(ctx context.Context, in *LookupContactRequest, opts ...grpc.CallOption) (*LookupContactResponse, error)
}

type registrarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrarServiceClient(cc grpc.ClientConnInterface) RegistrarServiceClient {
	return &registrarServiceClient{cc}
}

func (c *registrarServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, RegistrarService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrarServiceClient) Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterResponse)
	err := c.cc.Invoke(ctx, RegistrarService_Unregister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrarServiceClient) LookupContact(ctx context.Context, in *LookupContactRequest, opts ...grpc.CallOption) (*LookupContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupContactResponse)
	err := c.cc.Invoke(ctx, RegistrarService_LookupContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrarServiceServer is the server API for RegistrarService service.
// All implementations should embed UnimplementedRegistrarServiceServer
// for forward compatibility.
//
// RegistrarService, SIP uç noktalarının kaydını yönetir.
type RegistrarServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Unregister(context.Context, *UnregisterRequest) (*UnregisterResponse, error)
	LookupContact(context.Context, *LookupContactRequest) (*LookupContactResponse, error)
}

// UnimplementedRegistrarServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegistrarServiceServer struct{}

func (UnimplementedRegistrarServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegistrarServiceServer) Unregister(context.Context, *UnregisterRequest) (*UnregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedRegistrarServiceServer) LookupContact(context.Context, *LookupContactRequest) (*LookupContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupContact not implemented")
}
func (UnimplementedRegistrarServiceServer) testEmbeddedByValue() {}

// UnsafeRegistrarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrarServiceServer will
// result in compilation errors.
type UnsafeRegistrarServiceServer interface {
	mustEmbedUnimplementedRegistrarServiceServer()
}

func RegisterRegistrarServiceServer(s grpc.ServiceRegistrar, srv RegistrarServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegistrarServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegistrarService_ServiceDesc, srv)
}

func _RegistrarService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrarServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrarService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrarServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrarService_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrarServiceServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrarService_Unregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrarServiceServer).Unregister(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrarService_LookupContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrarServiceServer).LookupContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrarService_LookupContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrarServiceServer).LookupContact(ctx, req.(*LookupContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistrarService_ServiceDesc is the grpc.ServiceDesc for RegistrarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistrarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentiric.sip.v1.RegistrarService",
	HandlerType: (*RegistrarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RegistrarService_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _RegistrarService_Unregister_Handler,
		},
		{
			MethodName: "LookupContact",
			Handler:    _RegistrarService_LookupContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentiric/sip/v1/registrar.proto",
}
