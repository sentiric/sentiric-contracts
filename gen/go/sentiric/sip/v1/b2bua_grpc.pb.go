// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sentiric/sip/v1/b2bua.proto

package sipv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	B2BUAService_InitiateCall_FullMethodName = "/sentiric.sip.v1.B2BUAService/InitiateCall"
	B2BUAService_TransferCall_FullMethodName = "/sentiric.sip.v1.B2BUAService/TransferCall"
)

// B2BUAServiceClient is the client API for B2BUAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// B2BUAService, AI odaklı çağrı başlatma ve transfer mantığını yönetir.
type B2BUAServiceClient interface {
	InitiateCall(ctx context.Context, in *InitiateCallRequest, opts ...grpc.CallOption) (*InitiateCallResponse, error)
	TransferCall(ctx context.Context, in *TransferCallRequest, opts ...grpc.CallOption) (*TransferCallResponse, error)
}

type b2BUAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewB2BUAServiceClient(cc grpc.ClientConnInterface) B2BUAServiceClient {
	return &b2BUAServiceClient{cc}
}

func (c *b2BUAServiceClient) InitiateCall(ctx context.Context, in *InitiateCallRequest, opts ...grpc.CallOption) (*InitiateCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateCallResponse)
	err := c.cc.Invoke(ctx, B2BUAService_InitiateCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2BUAServiceClient) TransferCall(ctx context.Context, in *TransferCallRequest, opts ...grpc.CallOption) (*TransferCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCallResponse)
	err := c.cc.Invoke(ctx, B2BUAService_TransferCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// B2BUAServiceServer is the server API for B2BUAService service.
// All implementations should embed UnimplementedB2BUAServiceServer
// for forward compatibility.
//
// B2BUAService, AI odaklı çağrı başlatma ve transfer mantığını yönetir.
type B2BUAServiceServer interface {
	InitiateCall(context.Context, *InitiateCallRequest) (*InitiateCallResponse, error)
	TransferCall(context.Context, *TransferCallRequest) (*TransferCallResponse, error)
}

// UnimplementedB2BUAServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedB2BUAServiceServer struct{}

func (UnimplementedB2BUAServiceServer) InitiateCall(context.Context, *InitiateCallRequest) (*InitiateCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateCall not implemented")
}
func (UnimplementedB2BUAServiceServer) TransferCall(context.Context, *TransferCallRequest) (*TransferCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCall not implemented")
}
func (UnimplementedB2BUAServiceServer) testEmbeddedByValue() {}

// UnsafeB2BUAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to B2BUAServiceServer will
// result in compilation errors.
type UnsafeB2BUAServiceServer interface {
	mustEmbedUnimplementedB2BUAServiceServer()
}

func RegisterB2BUAServiceServer(s grpc.ServiceRegistrar, srv B2BUAServiceServer) {
	// If the following call pancis, it indicates UnimplementedB2BUAServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&B2BUAService_ServiceDesc, srv)
}

func _B2BUAService_InitiateCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2BUAServiceServer).InitiateCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: B2BUAService_InitiateCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2BUAServiceServer).InitiateCall(ctx, req.(*InitiateCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2BUAService_TransferCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2BUAServiceServer).TransferCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: B2BUAService_TransferCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2BUAServiceServer).TransferCall(ctx, req.(*TransferCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// B2BUAService_ServiceDesc is the grpc.ServiceDesc for B2BUAService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var B2BUAService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentiric.sip.v1.B2BUAService",
	HandlerType: (*B2BUAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateCall",
			Handler:    _B2BUAService_InitiateCall_Handler,
		},
		{
			MethodName: "TransferCall",
			Handler:    _B2BUAService_TransferCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentiric/sip/v1/b2bua.proto",
}
