// @generated
// This file is @generated by prost-build.
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOrderStatusRequest {
    #[prost(string, tag="1")]
    pub order_id: ::prost::alloc::string::String,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOrderStatusResponse {
    #[prost(string, tag="1")]
    pub status: ::prost::alloc::string::String,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAccountBalanceRequest {
    #[prost(string, tag="1")]
    pub account_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAccountBalanceResponse {
    #[prost(double, tag="1")]
    pub balance: f64,
    #[prost(string, tag="2")]
    pub currency: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub last_transaction_date: ::prost::alloc::string::String,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindDoctorRequest {
    #[prost(string, tag="1")]
    pub specialty: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub location: ::prost::alloc::string::String,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindDoctorResponse {
    #[prost(message, repeated, tag="1")]
    pub doctors: ::prost::alloc::vec::Vec<DoctorInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoctorInfo {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub specialty: ::prost::alloc::string::String,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScheduleAppointmentRequest {
    #[prost(string, tag="1")]
    pub doctor_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub patient_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub preferred_time_iso: ::prost::alloc::string::String,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScheduleAppointmentResponse {
    #[prost(string, tag="1")]
    pub confirmation_id: ::prost::alloc::string::String,
    #[prost(bool, tag="2")]
    pub success: bool,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindHotelsRequest {
    #[prost(string, tag="1")]
    pub location: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub check_in_date: ::prost::alloc::string::String,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindHotelsResponse {
    #[prost(message, repeated, tag="1")]
    pub results: ::prost::alloc::vec::Vec<HotelResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HotelResult {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag="2")]
    pub rating: i32,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BookRoomRequest {
    #[prost(string, tag="1")]
    pub hotel_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub guest_name: ::prost::alloc::string::String,
    #[prost(int32, tag="3")]
    pub num_guests: i32,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BookRoomResponse {
    #[prost(string, tag="1")]
    pub booking_id: ::prost::alloc::string::String,
    #[prost(bool, tag="2")]
    pub success: bool,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckCaseStatusRequest {
    #[prost(string, tag="1")]
    pub case_number: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub client_id: ::prost::alloc::string::String,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckCaseStatusResponse {
    #[prost(string, tag="1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub next_hearing_date: ::core::option::Option<::prost::alloc::string::String>,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitApplicationRequest {
    #[prost(string, tag="1")]
    pub application_type: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="2")]
    pub form_data: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(string, tag="3")]
    pub user_id: ::prost::alloc::string::String,
}
/// RPC Kuralı
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitApplicationResponse {
    #[prost(string, tag="1")]
    pub tracking_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
}
include!("sentiric.vertical.v1.tonic.rs");
// @@protoc_insertion_point(module)