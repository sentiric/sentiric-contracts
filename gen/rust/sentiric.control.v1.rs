// @generated
// This file is @generated by prost-build.
/// ESKİ: FeatureRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifyFeatureRequest {
    #[prost(string, tag="1")]
    pub tenant_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub feature_name: ::prost::alloc::string::String,
}
/// ESKİ: FeatureResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifyFeatureResponse {
    #[prost(bool, tag="1")]
    pub is_licensed: bool,
    #[prost(string, optional, tag="2")]
    pub limit_details: ::core::option::Option<::prost::alloc::string::String>,
}
/// ESKİ: MetricsRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMetricsRequest {
    #[prost(string, tag="1")]
    pub service_name: ::prost::alloc::string::String,
}
/// ESKİ: MetricsResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMetricsResponse {
    #[prost(map="string, double", tag="1")]
    pub metrics: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
}
/// ESKİ: LogRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLogsRequest {
    #[prost(string, tag="1")]
    pub service_name: ::prost::alloc::string::String,
    #[prost(int32, tag="2")]
    pub limit: i32,
}
/// ESKİ: LogResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLogsResponse {
    #[prost(string, repeated, tag="1")]
    pub log_entries: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// ESKİ: TaskRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DispatchTaskRequest {
    #[prost(string, tag="1")]
    pub task_type: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="2")]
    pub payload: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    #[prost(string, optional, tag="3")]
    pub due_date: ::core::option::Option<::prost::alloc::string::String>,
}
/// ESKİ: TaskID
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DispatchTaskResponse {
    /// İsim TaskID'den task_id'ye çevrildi
    #[prost(string, tag="1")]
    pub task_id: ::prost::alloc::string::String,
}
include!("sentiric.control.v1.tonic.rs");
// @@protoc_insertion_point(module)