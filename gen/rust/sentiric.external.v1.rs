// @generated
// This file is @generated by prost-build.
/// ESKİ: ActionRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteActionRequest {
    #[prost(string, tag="1")]
    pub connector_name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub action_name: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="3")]
    pub parameters: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// ESKİ: ActionResult
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteActionResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(map="string, string", tag="2")]
    pub output: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// ESKİ: ListRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRecipesRequest {
    #[prost(string, tag="1")]
    pub category: ::prost::alloc::string::String,
}
/// ESKİ: ListResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRecipesResponse {
    #[prost(message, repeated, tag="1")]
    pub recipes: ::prost::alloc::vec::Vec<RecipeInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecipeInfo {
    #[prost(string, tag="1")]
    pub recipe_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
}
/// ESKİ: InstallRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstallRecipeRequest {
    #[prost(string, tag="1")]
    pub recipe_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub tenant_id: ::prost::alloc::string::String,
}
/// ESKİ: InstallResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstallRecipeResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(string, tag="2")]
    pub deployment_status: ::prost::alloc::string::String,
}
/// ESKİ: SMSRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendSmsRequest {
    #[prost(string, tag="1")]
    pub to: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub body: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub tenant_id: ::prost::alloc::string::String,
}
/// ESKİ: SMSResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SendSmsResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
/// ESKİ: EmailRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendEmailRequest {
    #[prost(string, tag="1")]
    pub to: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub subject: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub body_html: ::prost::alloc::string::String,
}
/// ESKİ: EmailResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SendEmailResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
/// ESKİ: PaymentRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiatePaymentRequest {
    #[prost(string, tag="1")]
    pub tenant_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(double, tag="3")]
    pub amount: f64,
    #[prost(string, tag="4")]
    pub currency: ::prost::alloc::string::String,
}
/// ESKİ: PaymentResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiatePaymentResponse {
    #[prost(string, tag="1")]
    pub transaction_id: ::prost::alloc::string::String,
    /// "pending", "completed", "failed"
    #[prost(string, tag="2")]
    pub status: ::prost::alloc::string::String,
}
/// ESKİ: ApptRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAppointmentRequest {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub start_time_iso: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub end_time_iso: ::prost::alloc::string::String,
}
/// ESKİ: ApptResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAppointmentResponse {
    #[prost(string, tag="1")]
    pub appointment_id: ::prost::alloc::string::String,
    /// Başarı durumunu field 2'ye taşıdık
    #[prost(bool, tag="2")]
    pub success: bool,
}
include!("sentiric.external.v1.tonic.rs");
// @@protoc_insertion_point(module)