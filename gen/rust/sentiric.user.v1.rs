// @generated
// This file is @generated by prost-build.
// =================================================================
//                             DATA MODELS
// =================================================================

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Contact {
    #[prost(int32, tag="1")]
    pub id: i32,
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub contact_type: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub contact_value: ::prost::alloc::string::String,
    #[prost(bool, tag="5")]
    pub is_primary: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="3")]
    pub tenant_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub user_type: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="5")]
    pub contacts: ::prost::alloc::vec::Vec<Contact>,
    #[prost(string, optional, tag="6")]
    pub preferred_language_code: ::core::option::Option<::prost::alloc::string::String>,
}
// =================================================================
//                          RPC MESSAGES
// =================================================================

/// --- GetUser ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserRequest {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserResponse {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
}
/// --- FindUserByContact ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByContactRequest {
    #[prost(string, tag="1")]
    pub contact_type: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub contact_value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByContactResponse {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
}
/// --- CreateUser ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUserRequest {
    #[prost(string, tag="1")]
    pub tenant_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub user_type: ::prost::alloc::string::String,
    #[prost(string, optional, tag="3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="4")]
    pub initial_contact: ::core::option::Option<create_user_request::InitialContact>,
    #[prost(string, optional, tag="5")]
    pub preferred_language_code: ::core::option::Option<::prost::alloc::string::String>,
}
/// Nested message and enum types in `CreateUserRequest`.
pub mod create_user_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct InitialContact {
        #[prost(string, tag="1")]
        pub contact_type: ::prost::alloc::string::String,
        #[prost(string, tag="2")]
        pub contact_value: ::prost::alloc::string::String,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUserResponse {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
}
/// --- UpdateUser ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserRequest {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
    /// Hangi alanların güncelleneceğini belirtir
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserResponse {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
}
/// --- DeleteUser ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteUserRequest {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteUserResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
/// --- AddContact ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddContactRequest {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub contact: ::core::option::Option<Contact>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddContactResponse {
    /// Kullanıcının güncel halini döndürür
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
}
/// --- UpdateContact ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateContactRequest {
    #[prost(message, optional, tag="1")]
    pub contact: ::core::option::Option<Contact>,
    #[prost(message, optional, tag="2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateContactResponse {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
}
/// --- DeleteContact ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteContactRequest {
    #[prost(int32, tag="1")]
    pub contact_id: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteContactResponse {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
}
/// --- GetSipCredentials ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSipCredentialsRequest {
    #[prost(string, tag="1")]
    pub sip_username: ::prost::alloc::string::String,
    /// <-- YENİ ALAN
    #[prost(string, tag="2")]
    pub realm: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSipCredentialsResponse {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub tenant_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub ha1_hash: ::prost::alloc::string::String,
}
/// --- YENİ MESAJLAR ---
/// --- CreateSipCredential ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSipCredentialRequest {
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub sip_username: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub password: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateSipCredentialResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
/// --- DeleteSipCredential ---
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteSipCredentialRequest {
    #[prost(string, tag="1")]
    pub sip_username: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteSipCredentialResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
include!("sentiric.user.v1.tonic.rs");
// @@protoc_insertion_point(module)