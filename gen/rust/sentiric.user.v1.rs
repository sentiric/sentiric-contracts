// @generated
// This file is @generated by prost-build.
/// Contact mesajı, bir kullanıcının iletişim kanallarını temsil eder.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Contact {
    /// Veritabanındaki 'contacts' tablosunun primary key'i
    #[prost(int32, tag="1")]
    pub id: i32,
    /// UUID formatında
    #[prost(string, tag="2")]
    pub user_id: ::prost::alloc::string::String,
    /// 'phone', 'whatsapp', 'email'
    #[prost(string, tag="3")]
    pub contact_type: ::prost::alloc::string::String,
    /// örn: '905551234567'
    #[prost(string, tag="4")]
    pub contact_value: ::prost::alloc::string::String,
    #[prost(bool, tag="5")]
    pub is_primary: bool,
}
/// User mesajı artık iletişim bilgisi içermiyor, bir profil görevi görüyor.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    /// UUID formatında
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="3")]
    pub tenant_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub user_type: ::prost::alloc::string::String,
    /// Kullanıcının tüm iletişim kanallarını içeren liste
    #[prost(message, repeated, tag="5")]
    pub contacts: ::prost::alloc::vec::Vec<Contact>,
}
/// Artık kullanıcıyı bulmak için birden fazla yöntem var.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserRequest {
    /// UUID ile doğrudan arama
    #[prost(string, tag="1")]
    pub user_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByContactRequest {
    #[prost(string, tag="1")]
    pub contact_type: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub contact_value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserResponse {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
}
/// CreateUser artık temel profil ve ilk iletişim bilgisini alır.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUserRequest {
    #[prost(string, tag="1")]
    pub tenant_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub user_type: ::prost::alloc::string::String,
    #[prost(string, optional, tag="3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="4")]
    pub initial_contact: ::core::option::Option<create_user_request::InitialContact>,
}
/// Nested message and enum types in `CreateUserRequest`.
pub mod create_user_request {
    /// Kullanıcı oluşturulurken en az bir iletişim kanalı verilmeli.
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct InitialContact {
        #[prost(string, tag="1")]
        pub contact_type: ::prost::alloc::string::String,
        #[prost(string, tag="2")]
        pub contact_value: ::prost::alloc::string::String,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUserResponse {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
}
include!("sentiric.user.v1.tonic.rs");
// @@protoc_insertion_point(module)