// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateCallRequest {
    #[prost(string, tag="1")]
    pub call_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub from_uri: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub to_uri: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateCallResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(string, tag="2")]
    pub new_call_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferCallRequest {
    #[prost(string, tag="1")]
    pub existing_call_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub transfer_target_uri: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransferCallResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
/// ESKİ: LoadRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLoadRequest {
    #[prost(string, tag="1")]
    pub region: ::prost::alloc::string::String,
}
/// ESKİ: LoadResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLoadResponse {
    #[prost(double, tag="1")]
    pub current_cpu_load: f64,
    #[prost(int32, tag="2")]
    pub active_calls: i32,
}
/// ESKİ: RouteRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNextHopRequest {
    #[prost(string, tag="1")]
    pub destination_uri: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub source_ip: ::prost::alloc::string::String,
}
/// ESKİ: NextHop
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNextHopResponse {
    #[prost(string, tag="1")]
    pub uri: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub gateway_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterRequest {
    #[prost(string, tag="1")]
    pub sip_uri: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub contact_uri: ::prost::alloc::string::String,
    /// saniye cinsinden
    #[prost(int32, tag="3")]
    pub expires: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RegisterResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnregisterRequest {
    #[prost(string, tag="1")]
    pub sip_uri: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnregisterResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupContactRequest {
    #[prost(string, tag="1")]
    pub sip_uri: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupContactResponse {
    #[prost(string, repeated, tag="1")]
    pub contact_uris: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// ESKİ: SipPacket
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRouteRequest {
    #[prost(string, tag="1")]
    pub raw_sip_message: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub source_ip: ::prost::alloc::string::String,
}
/// ESKİ: SbcDecision
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRouteResponse {
    #[prost(bool, tag="1")]
    pub allow: bool,
    #[prost(string, optional, tag="2")]
    pub next_hop_uri: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TerminateCallRequest {
    /// Sonlandırılacak çağrının benzersiz SIP Call-ID'si.
    #[prost(string, tag="1")]
    pub call_id: ::prost::alloc::string::String,
    /// Sonlandırma nedenini belirten kısa bir dize (örn: "completed_by_agent").
    #[prost(string, tag="2")]
    pub reason: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TerminateCallResponse {
    /// İşlemin başarıyla tetiklenip tetiklenmediğini belirtir.
    #[prost(bool, tag="1")]
    pub success: bool,
    /// İşlemle ilgili ek bilgi içeren bir mesaj.
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
}
include!("sentiric.sip.v1.tonic.rs");
// @@protoc_insertion_point(module)