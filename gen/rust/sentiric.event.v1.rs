// @generated
// This file is @generated by prost-build.
// =================================================================
//                             OLAY MESAJLARI (EVENT MESSAGES)
// =================================================================
// Not: Bu dosyada tanımlanan mesajlar, servisler arası asenkron iletişimde
// (örn: RabbitMQ) kullanılacak olayların standart ve tip-güvenli
// yapısını belirlemek içindir. Bu, platform genelinde veri tutarlılığını garanti eder.

/// MediaInfo, bir çağrının medya (RTP) oturumuyla ilgili temel bilgileri içerir.
/// Bu yapı, `map<string, string>` gibi belirsiz ve hataya açık yapıların
/// yerine geçerek tip güvenliği sağlar.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MediaInfo {
    /// Arayan tarafın RTP paketlerini gönderdiği IP adresi ve portu (örn: "1.2.3.4:12345").
    #[prost(string, tag="1")]
    pub caller_rtp_addr: ::prost::alloc::string::String,
    /// `media-service` tarafından bu çağrı için tahsis edilen sunucu tarafı RTP portu.
    #[prost(uint32, tag="2")]
    pub server_rtp_port: u32,
}
/// CallStartedEvent, bir SIP çağrısının `sip-signaling` tarafından başarıyla
/// kurulduğunu ve platformun iç mantığı tarafından işlenmeye hazır olduğunu bildirir.
/// Bu olay, genellikle `agent-service` tarafından tüketilir.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallStartedEvent {
    /// Olayın türü, standart olarak "call.started".
    #[prost(string, tag="1")]
    pub event_type: ::prost::alloc::string::String,
    /// Tüm çağrı yaşam döngüsü boyunca işlemleri takip etmek için kullanılan benzersiz kimlik.
    #[prost(string, tag="2")]
    pub trace_id: ::prost::alloc::string::String,
    /// Çağrının SIP Call-ID'si.
    #[prost(string, tag="3")]
    pub call_id: ::prost::alloc::string::String,
    /// Arayanın SIP URI'si.
    #[prost(string, tag="4")]
    pub from_uri: ::prost::alloc::string::String,
    /// Arananın SIP URI'si.
    #[prost(string, tag="5")]
    pub to_uri: ::prost::alloc::string::String,
    /// Olayın UTC olarak oluşturulma zamanı.
    #[prost(message, optional, tag="6")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// `dialplan-service`'ten dönen, çağrının nasıl işleneceğine dair tüm zenginleştirilmiş bilgi.
    #[prost(message, optional, tag="7")]
    pub dialplan_resolution: ::core::option::Option<super::super::dialplan::v1::ResolveDialplanResponse>,
    /// DEĞİŞİKLİK: `map<string, string>` yerine tip-güvenli `MediaInfo` mesajı kullanılıyor.
    /// Bu, tüketen servislerde (örn: agent-service) anahtar adı hatalarını ve tip dönüşüm
    /// problemlerini ortadan kaldırır.
    #[prost(message, optional, tag="8")]
    pub media_info: ::core::option::Option<MediaInfo>,
}
/// UserIdentifiedForCallEvent, bir çağrı sırasında arayanın kimliğinin
/// `user-service` tarafından belirlendiğini veya yeni bir kullanıcı olarak
/// oluşturulduğunu bildirir.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserIdentifiedForCallEvent {
    /// "user.identified.for_call" veya "user.created.for_call"
    #[prost(string, tag="1")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub call_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag="5")]
    pub user: ::core::option::Option<super::super::user::v1::User>,
    #[prost(message, optional, tag="6")]
    pub contact: ::core::option::Option<super::super::user::v1::Contact>,
}
/// CallRecordingAvailableEvent, bir çağrının ses kaydının işlenip
/// depolama alanına (örn: S3) yüklendiğini bildirir.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallRecordingAvailableEvent {
    /// "call.recording.available"
    #[prost(string, tag="1")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub call_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Kaydın depolama alanındaki URI'si (örn: "s3://sentiric/recordings/call123.wav").
    #[prost(string, tag="5")]
    pub recording_uri: ::prost::alloc::string::String,
    /// Kayda erişilebilecek genel URL (eğer varsa).
    #[prost(string, tag="6")]
    pub public_url: ::prost::alloc::string::String,
}
/// CallEndedEvent, bir çağrının sonlandığını bildirir.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallEndedEvent {
    /// "call.ended"
    #[prost(string, tag="1")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub call_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Çağrının sonlanma nedeni (örn: "normal_clearing", "terminated_by_request").
    #[prost(string, tag="5")]
    pub reason: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
