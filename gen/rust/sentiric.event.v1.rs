// @generated
// This file is @generated by prost-build.
// Not: Bu dosyada tanımlanan mesajlar gRPC için değil,
// RabbitMQ gibi mesajlaşma kuyruklarında kullanılacak olayların
// standart yapısını belirlemek içindir.

/// call.started olayının standart yapısı.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallStartedEvent {
    #[prost(string, tag="1")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub call_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub from_uri: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub to_uri: ::prost::alloc::string::String,
    #[prost(message, optional, tag="6")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// YENİ ALAN: Dialplan'dan gelen tüm zenginleştirilmiş bilgiyi taşır.
    #[prost(message, optional, tag="7")]
    pub dialplan_resolution: ::core::option::Option<super::super::dialplan::v1::ResolveDialplanResponse>,
    #[prost(map="string, string", tag="8")]
    pub media_info: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// user.created.for_call veya user.identified.for_call olayının standart yapısı.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserIdentifiedForCallEvent {
    #[prost(string, tag="1")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub call_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag="5")]
    pub user: ::core::option::Option<super::super::user::v1::User>,
    #[prost(message, optional, tag="6")]
    pub contact: ::core::option::Option<super::super::user::v1::Contact>,
}
/// call.recording.available olayının standart yapısı.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallRecordingAvailableEvent {
    #[prost(string, tag="1")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub call_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// s3://...
    #[prost(string, tag="5")]
    pub recording_uri: ::prost::alloc::string::String,
    /// <https://...>
    #[prost(string, tag="6")]
    pub public_url: ::prost::alloc::string::String,
}
/// call.ended olayının standart yapısı.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallEndedEvent {
    #[prost(string, tag="1")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub trace_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub call_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Örn: "normal_clearing", "terminated_by_request"
    #[prost(string, tag="5")]
    pub reason: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
