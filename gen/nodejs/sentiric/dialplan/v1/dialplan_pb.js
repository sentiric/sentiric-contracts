// source: sentiric/dialplan/v1/dialplan.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var sentiric_user_v1_user_pb = require('../../../sentiric/user/v1/user_pb.js');
goog.object.extend(proto, sentiric_user_v1_user_pb);
goog.exportSymbol('proto.sentiric.dialplan.v1.ActionData', null, global);
goog.exportSymbol('proto.sentiric.dialplan.v1.DialplanAction', null, global);
goog.exportSymbol('proto.sentiric.dialplan.v1.InboundRoute', null, global);
goog.exportSymbol('proto.sentiric.dialplan.v1.ResolveDialplanRequest', null, global);
goog.exportSymbol('proto.sentiric.dialplan.v1.ResolveDialplanResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.dialplan.v1.ResolveDialplanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.dialplan.v1.ResolveDialplanRequest.displayName = 'proto.sentiric.dialplan.v1.ResolveDialplanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.dialplan.v1.ActionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.dialplan.v1.ActionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.dialplan.v1.ActionData.displayName = 'proto.sentiric.dialplan.v1.ActionData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.dialplan.v1.DialplanAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.dialplan.v1.DialplanAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.dialplan.v1.DialplanAction.displayName = 'proto.sentiric.dialplan.v1.DialplanAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.dialplan.v1.InboundRoute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.dialplan.v1.InboundRoute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.dialplan.v1.InboundRoute.displayName = 'proto.sentiric.dialplan.v1.InboundRoute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.dialplan.v1.ResolveDialplanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.dialplan.v1.ResolveDialplanResponse.displayName = 'proto.sentiric.dialplan.v1.ResolveDialplanResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.dialplan.v1.ResolveDialplanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.dialplan.v1.ResolveDialplanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
callerContactValue: jspb.Message.getFieldWithDefault(msg, 1, ""),
destinationNumber: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanRequest}
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.dialplan.v1.ResolveDialplanRequest;
  return proto.sentiric.dialplan.v1.ResolveDialplanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.dialplan.v1.ResolveDialplanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanRequest}
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallerContactValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.dialplan.v1.ResolveDialplanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.dialplan.v1.ResolveDialplanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallerContactValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestinationNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string caller_contact_value = 1;
 * @return {string}
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest.prototype.getCallerContactValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanRequest} returns this
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest.prototype.setCallerContactValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destination_number = 2;
 * @return {string}
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest.prototype.getDestinationNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanRequest} returns this
 */
proto.sentiric.dialplan.v1.ResolveDialplanRequest.prototype.setDestinationNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.dialplan.v1.ActionData.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.dialplan.v1.ActionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.dialplan.v1.ActionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialplan.v1.ActionData.toObject = function(includeInstance, msg) {
  var f, obj = {
dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.dialplan.v1.ActionData}
 */
proto.sentiric.dialplan.v1.ActionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.dialplan.v1.ActionData;
  return proto.sentiric.dialplan.v1.ActionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.dialplan.v1.ActionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.dialplan.v1.ActionData}
 */
proto.sentiric.dialplan.v1.ActionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.dialplan.v1.ActionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.dialplan.v1.ActionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.dialplan.v1.ActionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialplan.v1.ActionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> data = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.sentiric.dialplan.v1.ActionData.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.sentiric.dialplan.v1.ActionData} returns this
 */
proto.sentiric.dialplan.v1.ActionData.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.dialplan.v1.DialplanAction.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.dialplan.v1.DialplanAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.dialplan.v1.DialplanAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialplan.v1.DialplanAction.toObject = function(includeInstance, msg) {
  var f, obj = {
action: jspb.Message.getFieldWithDefault(msg, 1, ""),
actionData: (f = msg.getActionData()) && proto.sentiric.dialplan.v1.ActionData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.dialplan.v1.DialplanAction}
 */
proto.sentiric.dialplan.v1.DialplanAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.dialplan.v1.DialplanAction;
  return proto.sentiric.dialplan.v1.DialplanAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.dialplan.v1.DialplanAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.dialplan.v1.DialplanAction}
 */
proto.sentiric.dialplan.v1.DialplanAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = new proto.sentiric.dialplan.v1.ActionData;
      reader.readMessage(value,proto.sentiric.dialplan.v1.ActionData.deserializeBinaryFromReader);
      msg.setActionData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.dialplan.v1.DialplanAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.dialplan.v1.DialplanAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.dialplan.v1.DialplanAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialplan.v1.DialplanAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActionData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sentiric.dialplan.v1.ActionData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string action = 1;
 * @return {string}
 */
proto.sentiric.dialplan.v1.DialplanAction.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.DialplanAction} returns this
 */
proto.sentiric.dialplan.v1.DialplanAction.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ActionData action_data = 2;
 * @return {?proto.sentiric.dialplan.v1.ActionData}
 */
proto.sentiric.dialplan.v1.DialplanAction.prototype.getActionData = function() {
  return /** @type{?proto.sentiric.dialplan.v1.ActionData} */ (
    jspb.Message.getWrapperField(this, proto.sentiric.dialplan.v1.ActionData, 2));
};


/**
 * @param {?proto.sentiric.dialplan.v1.ActionData|undefined} value
 * @return {!proto.sentiric.dialplan.v1.DialplanAction} returns this
*/
proto.sentiric.dialplan.v1.DialplanAction.prototype.setActionData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.dialplan.v1.DialplanAction} returns this
 */
proto.sentiric.dialplan.v1.DialplanAction.prototype.clearActionData = function() {
  return this.setActionData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialplan.v1.DialplanAction.prototype.hasActionData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.dialplan.v1.InboundRoute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.dialplan.v1.InboundRoute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialplan.v1.InboundRoute.toObject = function(includeInstance, msg) {
  var f, obj = {
phoneNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
tenantId: jspb.Message.getFieldWithDefault(msg, 2, ""),
activeDialplanId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
offHoursDialplanId: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
failsafeDialplanId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
isMaintenanceMode: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
defaultLanguageCode: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.dialplan.v1.InboundRoute}
 */
proto.sentiric.dialplan.v1.InboundRoute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.dialplan.v1.InboundRoute;
  return proto.sentiric.dialplan.v1.InboundRoute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.dialplan.v1.InboundRoute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.dialplan.v1.InboundRoute}
 */
proto.sentiric.dialplan.v1.InboundRoute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActiveDialplanId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffHoursDialplanId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFailsafeDialplanId(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMaintenanceMode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultLanguageCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.dialplan.v1.InboundRoute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.dialplan.v1.InboundRoute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialplan.v1.InboundRoute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsMaintenanceMode();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDefaultLanguageCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string phone_number = 1;
 * @return {string}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.InboundRoute} returns this
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tenant_id = 2;
 * @return {string}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.InboundRoute} returns this
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string active_dialplan_id = 3;
 * @return {string}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.getActiveDialplanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.InboundRoute} returns this
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.setActiveDialplanId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sentiric.dialplan.v1.InboundRoute} returns this
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.clearActiveDialplanId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.hasActiveDialplanId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string off_hours_dialplan_id = 4;
 * @return {string}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.getOffHoursDialplanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.InboundRoute} returns this
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.setOffHoursDialplanId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sentiric.dialplan.v1.InboundRoute} returns this
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.clearOffHoursDialplanId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.hasOffHoursDialplanId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string failsafe_dialplan_id = 5;
 * @return {string}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.getFailsafeDialplanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.InboundRoute} returns this
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.setFailsafeDialplanId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sentiric.dialplan.v1.InboundRoute} returns this
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.clearFailsafeDialplanId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.hasFailsafeDialplanId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool is_maintenance_mode = 6;
 * @return {boolean}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.getIsMaintenanceMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sentiric.dialplan.v1.InboundRoute} returns this
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.setIsMaintenanceMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string default_language_code = 7;
 * @return {string}
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.getDefaultLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.InboundRoute} returns this
 */
proto.sentiric.dialplan.v1.InboundRoute.prototype.setDefaultLanguageCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.dialplan.v1.ResolveDialplanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
dialplanId: jspb.Message.getFieldWithDefault(msg, 1, ""),
tenantId: jspb.Message.getFieldWithDefault(msg, 2, ""),
action: (f = msg.getAction()) && proto.sentiric.dialplan.v1.DialplanAction.toObject(includeInstance, f),
matchedUser: (f = msg.getMatchedUser()) && sentiric_user_v1_user_pb.User.toObject(includeInstance, f),
matchedContact: (f = msg.getMatchedContact()) && sentiric_user_v1_user_pb.Contact.toObject(includeInstance, f),
inboundRoute: (f = msg.getInboundRoute()) && proto.sentiric.dialplan.v1.InboundRoute.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.dialplan.v1.ResolveDialplanResponse;
  return proto.sentiric.dialplan.v1.ResolveDialplanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialplanId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    case 3:
      var value = new proto.sentiric.dialplan.v1.DialplanAction;
      reader.readMessage(value,proto.sentiric.dialplan.v1.DialplanAction.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 4:
      var value = new sentiric_user_v1_user_pb.User;
      reader.readMessage(value,sentiric_user_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setMatchedUser(value);
      break;
    case 5:
      var value = new sentiric_user_v1_user_pb.Contact;
      reader.readMessage(value,sentiric_user_v1_user_pb.Contact.deserializeBinaryFromReader);
      msg.setMatchedContact(value);
      break;
    case 6:
      var value = new proto.sentiric.dialplan.v1.InboundRoute;
      reader.readMessage(value,proto.sentiric.dialplan.v1.InboundRoute.deserializeBinaryFromReader);
      msg.setInboundRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.dialplan.v1.ResolveDialplanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDialplanId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sentiric.dialplan.v1.DialplanAction.serializeBinaryToWriter
    );
  }
  f = message.getMatchedUser();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      sentiric_user_v1_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getMatchedContact();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      sentiric_user_v1_user_pb.Contact.serializeBinaryToWriter
    );
  }
  f = message.getInboundRoute();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sentiric.dialplan.v1.InboundRoute.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dialplan_id = 1;
 * @return {string}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.getDialplanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} returns this
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.setDialplanId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tenant_id = 2;
 * @return {string}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} returns this
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DialplanAction action = 3;
 * @return {?proto.sentiric.dialplan.v1.DialplanAction}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.getAction = function() {
  return /** @type{?proto.sentiric.dialplan.v1.DialplanAction} */ (
    jspb.Message.getWrapperField(this, proto.sentiric.dialplan.v1.DialplanAction, 3));
};


/**
 * @param {?proto.sentiric.dialplan.v1.DialplanAction|undefined} value
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} returns this
*/
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.setAction = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} returns this
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.hasAction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sentiric.user.v1.User matched_user = 4;
 * @return {?proto.sentiric.user.v1.User}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.getMatchedUser = function() {
  return /** @type{?proto.sentiric.user.v1.User} */ (
    jspb.Message.getWrapperField(this, sentiric_user_v1_user_pb.User, 4));
};


/**
 * @param {?proto.sentiric.user.v1.User|undefined} value
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} returns this
*/
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.setMatchedUser = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} returns this
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.clearMatchedUser = function() {
  return this.setMatchedUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.hasMatchedUser = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sentiric.user.v1.Contact matched_contact = 5;
 * @return {?proto.sentiric.user.v1.Contact}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.getMatchedContact = function() {
  return /** @type{?proto.sentiric.user.v1.Contact} */ (
    jspb.Message.getWrapperField(this, sentiric_user_v1_user_pb.Contact, 5));
};


/**
 * @param {?proto.sentiric.user.v1.Contact|undefined} value
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} returns this
*/
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.setMatchedContact = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} returns this
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.clearMatchedContact = function() {
  return this.setMatchedContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.hasMatchedContact = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional InboundRoute inbound_route = 6;
 * @return {?proto.sentiric.dialplan.v1.InboundRoute}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.getInboundRoute = function() {
  return /** @type{?proto.sentiric.dialplan.v1.InboundRoute} */ (
    jspb.Message.getWrapperField(this, proto.sentiric.dialplan.v1.InboundRoute, 6));
};


/**
 * @param {?proto.sentiric.dialplan.v1.InboundRoute|undefined} value
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} returns this
*/
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.setInboundRoute = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.dialplan.v1.ResolveDialplanResponse} returns this
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.clearInboundRoute = function() {
  return this.setInboundRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialplan.v1.ResolveDialplanResponse.prototype.hasInboundRoute = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.sentiric.dialplan.v1);
