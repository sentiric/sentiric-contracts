// source: sentiric/event/v1/event.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = globalThis;

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var sentiric_dialplan_v1_dialplan_pb = require('../../../sentiric/dialplan/v1/dialplan_pb.js');
goog.object.extend(proto, sentiric_dialplan_v1_dialplan_pb);
var sentiric_user_v1_user_pb = require('../../../sentiric/user/v1/user_pb.js');
goog.object.extend(proto, sentiric_user_v1_user_pb);
goog.exportSymbol('proto.sentiric.event.v1.CallEndedEvent', null, global);
goog.exportSymbol('proto.sentiric.event.v1.CallRecordingAvailableEvent', null, global);
goog.exportSymbol('proto.sentiric.event.v1.CallStartedEvent', null, global);
goog.exportSymbol('proto.sentiric.event.v1.MediaInfo', null, global);
goog.exportSymbol('proto.sentiric.event.v1.UserIdentifiedForCallEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.event.v1.MediaInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.event.v1.MediaInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.event.v1.MediaInfo.displayName = 'proto.sentiric.event.v1.MediaInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.event.v1.CallStartedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.event.v1.CallStartedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.event.v1.CallStartedEvent.displayName = 'proto.sentiric.event.v1.CallStartedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.event.v1.UserIdentifiedForCallEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.event.v1.UserIdentifiedForCallEvent.displayName = 'proto.sentiric.event.v1.UserIdentifiedForCallEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.event.v1.CallRecordingAvailableEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.event.v1.CallRecordingAvailableEvent.displayName = 'proto.sentiric.event.v1.CallRecordingAvailableEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.event.v1.CallEndedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.event.v1.CallEndedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.event.v1.CallEndedEvent.displayName = 'proto.sentiric.event.v1.CallEndedEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.event.v1.MediaInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.event.v1.MediaInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.event.v1.MediaInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.event.v1.MediaInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
callerRtpAddr: jspb.Message.getFieldWithDefault(msg, 1, ""),
serverRtpPort: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.event.v1.MediaInfo}
 */
proto.sentiric.event.v1.MediaInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.event.v1.MediaInfo;
  return proto.sentiric.event.v1.MediaInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.event.v1.MediaInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.event.v1.MediaInfo}
 */
proto.sentiric.event.v1.MediaInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setCallerRtpAddr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerRtpPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.event.v1.MediaInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.event.v1.MediaInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.event.v1.MediaInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.event.v1.MediaInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallerRtpAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServerRtpPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string caller_rtp_addr = 1;
 * @return {string}
 */
proto.sentiric.event.v1.MediaInfo.prototype.getCallerRtpAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.MediaInfo} returns this
 */
proto.sentiric.event.v1.MediaInfo.prototype.setCallerRtpAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 server_rtp_port = 2;
 * @return {number}
 */
proto.sentiric.event.v1.MediaInfo.prototype.getServerRtpPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sentiric.event.v1.MediaInfo} returns this
 */
proto.sentiric.event.v1.MediaInfo.prototype.setServerRtpPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.event.v1.CallStartedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.event.v1.CallStartedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.event.v1.CallStartedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
eventType: jspb.Message.getFieldWithDefault(msg, 1, ""),
traceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
callId: jspb.Message.getFieldWithDefault(msg, 3, ""),
fromUri: jspb.Message.getFieldWithDefault(msg, 4, ""),
toUri: jspb.Message.getFieldWithDefault(msg, 5, ""),
timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
dialplanResolution: (f = msg.getDialplanResolution()) && sentiric_dialplan_v1_dialplan_pb.ResolveDialplanResponse.toObject(includeInstance, f),
mediaInfo: (f = msg.getMediaInfo()) && proto.sentiric.event.v1.MediaInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.event.v1.CallStartedEvent}
 */
proto.sentiric.event.v1.CallStartedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.event.v1.CallStartedEvent;
  return proto.sentiric.event.v1.CallStartedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.event.v1.CallStartedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.event.v1.CallStartedEvent}
 */
proto.sentiric.event.v1.CallStartedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setEventType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setTraceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setCallId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setFromUri(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setToUri(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 7:
      var value = new sentiric_dialplan_v1_dialplan_pb.ResolveDialplanResponse;
      reader.readMessage(value,sentiric_dialplan_v1_dialplan_pb.ResolveDialplanResponse.deserializeBinaryFromReader);
      msg.setDialplanResolution(value);
      break;
    case 8:
      var value = new proto.sentiric.event.v1.MediaInfo;
      reader.readMessage(value,proto.sentiric.event.v1.MediaInfo.deserializeBinaryFromReader);
      msg.setMediaInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.event.v1.CallStartedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.event.v1.CallStartedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.event.v1.CallStartedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTraceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCallId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFromUri();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getToUri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDialplanResolution();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      sentiric_dialplan_v1_dialplan_pb.ResolveDialplanResponse.serializeBinaryToWriter
    );
  }
  f = message.getMediaInfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.sentiric.event.v1.MediaInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string event_type = 1;
 * @return {string}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string trace_id = 2;
 * @return {string}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string call_id = 3;
 * @return {string}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.getCallId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.setCallId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string from_uri = 4;
 * @return {string}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.getFromUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.setFromUri = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string to_uri = 5;
 * @return {string}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.getToUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.setToUri = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
*/
proto.sentiric.event.v1.CallStartedEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional sentiric.dialplan.v1.ResolveDialplanResponse dialplan_resolution = 7;
 * @return {?proto.sentiric.dialplan.v1.ResolveDialplanResponse}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.getDialplanResolution = function() {
  return /** @type{?proto.sentiric.dialplan.v1.ResolveDialplanResponse} */ (
    jspb.Message.getWrapperField(this, sentiric_dialplan_v1_dialplan_pb.ResolveDialplanResponse, 7));
};


/**
 * @param {?proto.sentiric.dialplan.v1.ResolveDialplanResponse|undefined} value
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
*/
proto.sentiric.event.v1.CallStartedEvent.prototype.setDialplanResolution = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.clearDialplanResolution = function() {
  return this.setDialplanResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.hasDialplanResolution = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MediaInfo media_info = 8;
 * @return {?proto.sentiric.event.v1.MediaInfo}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.getMediaInfo = function() {
  return /** @type{?proto.sentiric.event.v1.MediaInfo} */ (
    jspb.Message.getWrapperField(this, proto.sentiric.event.v1.MediaInfo, 8));
};


/**
 * @param {?proto.sentiric.event.v1.MediaInfo|undefined} value
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
*/
proto.sentiric.event.v1.CallStartedEvent.prototype.setMediaInfo = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.event.v1.CallStartedEvent} returns this
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.clearMediaInfo = function() {
  return this.setMediaInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.event.v1.CallStartedEvent.prototype.hasMediaInfo = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.event.v1.UserIdentifiedForCallEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
eventType: jspb.Message.getFieldWithDefault(msg, 1, ""),
traceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
callId: jspb.Message.getFieldWithDefault(msg, 3, ""),
timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
user: (f = msg.getUser()) && sentiric_user_v1_user_pb.User.toObject(includeInstance, f),
contact: (f = msg.getContact()) && sentiric_user_v1_user_pb.Contact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.event.v1.UserIdentifiedForCallEvent;
  return proto.sentiric.event.v1.UserIdentifiedForCallEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setEventType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setTraceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setCallId(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = new sentiric_user_v1_user_pb.User;
      reader.readMessage(value,sentiric_user_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 6:
      var value = new sentiric_user_v1_user_pb.Contact;
      reader.readMessage(value,sentiric_user_v1_user_pb.Contact.deserializeBinaryFromReader);
      msg.setContact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.event.v1.UserIdentifiedForCallEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTraceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCallId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      sentiric_user_v1_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getContact();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      sentiric_user_v1_user_pb.Contact.serializeBinaryToWriter
    );
  }
};


/**
 * optional string event_type = 1;
 * @return {string}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} returns this
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string trace_id = 2;
 * @return {string}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} returns this
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string call_id = 3;
 * @return {string}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.getCallId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} returns this
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.setCallId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} returns this
*/
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} returns this
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sentiric.user.v1.User user = 5;
 * @return {?proto.sentiric.user.v1.User}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.getUser = function() {
  return /** @type{?proto.sentiric.user.v1.User} */ (
    jspb.Message.getWrapperField(this, sentiric_user_v1_user_pb.User, 5));
};


/**
 * @param {?proto.sentiric.user.v1.User|undefined} value
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} returns this
*/
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} returns this
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.hasUser = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sentiric.user.v1.Contact contact = 6;
 * @return {?proto.sentiric.user.v1.Contact}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.getContact = function() {
  return /** @type{?proto.sentiric.user.v1.Contact} */ (
    jspb.Message.getWrapperField(this, sentiric_user_v1_user_pb.Contact, 6));
};


/**
 * @param {?proto.sentiric.user.v1.Contact|undefined} value
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} returns this
*/
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.setContact = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.event.v1.UserIdentifiedForCallEvent} returns this
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.clearContact = function() {
  return this.setContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.event.v1.UserIdentifiedForCallEvent.prototype.hasContact = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.event.v1.CallRecordingAvailableEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.event.v1.CallRecordingAvailableEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
eventType: jspb.Message.getFieldWithDefault(msg, 1, ""),
traceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
callId: jspb.Message.getFieldWithDefault(msg, 3, ""),
timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
recordingUri: jspb.Message.getFieldWithDefault(msg, 5, ""),
publicUrl: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.event.v1.CallRecordingAvailableEvent}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.event.v1.CallRecordingAvailableEvent;
  return proto.sentiric.event.v1.CallRecordingAvailableEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.event.v1.CallRecordingAvailableEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.event.v1.CallRecordingAvailableEvent}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setEventType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setTraceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setCallId(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setRecordingUri(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setPublicUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.event.v1.CallRecordingAvailableEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.event.v1.CallRecordingAvailableEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTraceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCallId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRecordingUri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPublicUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string event_type = 1;
 * @return {string}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallRecordingAvailableEvent} returns this
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string trace_id = 2;
 * @return {string}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallRecordingAvailableEvent} returns this
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string call_id = 3;
 * @return {string}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.getCallId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallRecordingAvailableEvent} returns this
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.setCallId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sentiric.event.v1.CallRecordingAvailableEvent} returns this
*/
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.event.v1.CallRecordingAvailableEvent} returns this
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string recording_uri = 5;
 * @return {string}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.getRecordingUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallRecordingAvailableEvent} returns this
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.setRecordingUri = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string public_url = 6;
 * @return {string}
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.getPublicUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallRecordingAvailableEvent} returns this
 */
proto.sentiric.event.v1.CallRecordingAvailableEvent.prototype.setPublicUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.event.v1.CallEndedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.event.v1.CallEndedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.event.v1.CallEndedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
eventType: jspb.Message.getFieldWithDefault(msg, 1, ""),
traceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
callId: jspb.Message.getFieldWithDefault(msg, 3, ""),
timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
reason: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.event.v1.CallEndedEvent}
 */
proto.sentiric.event.v1.CallEndedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.event.v1.CallEndedEvent;
  return proto.sentiric.event.v1.CallEndedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.event.v1.CallEndedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.event.v1.CallEndedEvent}
 */
proto.sentiric.event.v1.CallEndedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setEventType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setTraceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setCallId(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.event.v1.CallEndedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.event.v1.CallEndedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.event.v1.CallEndedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTraceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCallId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string event_type = 1;
 * @return {string}
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallEndedEvent} returns this
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string trace_id = 2;
 * @return {string}
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallEndedEvent} returns this
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string call_id = 3;
 * @return {string}
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.getCallId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallEndedEvent} returns this
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.setCallId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sentiric.event.v1.CallEndedEvent} returns this
*/
proto.sentiric.event.v1.CallEndedEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.event.v1.CallEndedEvent} returns this
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string reason = 5;
 * @return {string}
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.event.v1.CallEndedEvent} returns this
 */
proto.sentiric.event.v1.CallEndedEvent.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


goog.object.extend(exports, proto.sentiric.event.v1);
