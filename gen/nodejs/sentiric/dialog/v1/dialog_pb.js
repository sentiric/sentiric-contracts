// source: sentiric/dialog/v1/dialog.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = globalThis;

var sentiric_data_v1_context_pb = require('../../../sentiric/data/v1/context_pb.js');
goog.object.extend(proto, sentiric_data_v1_context_pb);
goog.exportSymbol('proto.sentiric.dialog.v1.ProcessUserInputRequest', null, global);
goog.exportSymbol('proto.sentiric.dialog.v1.ProcessUserInputResponse', null, global);
goog.exportSymbol('proto.sentiric.dialog.v1.StartDialogRequest', null, global);
goog.exportSymbol('proto.sentiric.dialog.v1.StartDialogResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.dialog.v1.StartDialogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.dialog.v1.StartDialogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.dialog.v1.StartDialogRequest.displayName = 'proto.sentiric.dialog.v1.StartDialogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.dialog.v1.StartDialogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.dialog.v1.StartDialogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.dialog.v1.StartDialogResponse.displayName = 'proto.sentiric.dialog.v1.StartDialogResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.dialog.v1.ProcessUserInputRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.dialog.v1.ProcessUserInputRequest.displayName = 'proto.sentiric.dialog.v1.ProcessUserInputRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sentiric.dialog.v1.ProcessUserInputResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sentiric.dialog.v1.ProcessUserInputResponse.displayName = 'proto.sentiric.dialog.v1.ProcessUserInputResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.dialog.v1.StartDialogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.dialog.v1.StartDialogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.dialog.v1.StartDialogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialog.v1.StartDialogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
context: (f = msg.getContext()) && sentiric_data_v1_context_pb.CallContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.dialog.v1.StartDialogRequest}
 */
proto.sentiric.dialog.v1.StartDialogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.dialog.v1.StartDialogRequest;
  return proto.sentiric.dialog.v1.StartDialogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.dialog.v1.StartDialogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.dialog.v1.StartDialogRequest}
 */
proto.sentiric.dialog.v1.StartDialogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new sentiric_data_v1_context_pb.CallContext;
      reader.readMessage(value,sentiric_data_v1_context_pb.CallContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.dialog.v1.StartDialogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.dialog.v1.StartDialogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.dialog.v1.StartDialogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialog.v1.StartDialogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      sentiric_data_v1_context_pb.CallContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional sentiric.data.v1.CallContext context = 1;
 * @return {?proto.sentiric.data.v1.CallContext}
 */
proto.sentiric.dialog.v1.StartDialogRequest.prototype.getContext = function() {
  return /** @type{?proto.sentiric.data.v1.CallContext} */ (
    jspb.Message.getWrapperField(this, sentiric_data_v1_context_pb.CallContext, 1));
};


/**
 * @param {?proto.sentiric.data.v1.CallContext|undefined} value
 * @return {!proto.sentiric.dialog.v1.StartDialogRequest} returns this
*/
proto.sentiric.dialog.v1.StartDialogRequest.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.dialog.v1.StartDialogRequest} returns this
 */
proto.sentiric.dialog.v1.StartDialogRequest.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialog.v1.StartDialogRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.dialog.v1.StartDialogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.dialog.v1.StartDialogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialog.v1.StartDialogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
responseText: jspb.Message.getFieldWithDefault(msg, 1, ""),
audioUri: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
nextAction: jspb.Message.getFieldWithDefault(msg, 3, ""),
updatedContext: (f = msg.getUpdatedContext()) && sentiric_data_v1_context_pb.CallContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.dialog.v1.StartDialogResponse}
 */
proto.sentiric.dialog.v1.StartDialogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.dialog.v1.StartDialogResponse;
  return proto.sentiric.dialog.v1.StartDialogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.dialog.v1.StartDialogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.dialog.v1.StartDialogResponse}
 */
proto.sentiric.dialog.v1.StartDialogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setResponseText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setAudioUri(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setNextAction(value);
      break;
    case 4:
      var value = new sentiric_data_v1_context_pb.CallContext;
      reader.readMessage(value,sentiric_data_v1_context_pb.CallContext.deserializeBinaryFromReader);
      msg.setUpdatedContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.dialog.v1.StartDialogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.dialog.v1.StartDialogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialog.v1.StartDialogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNextAction();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUpdatedContext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      sentiric_data_v1_context_pb.CallContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional string response_text = 1;
 * @return {string}
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.getResponseText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialog.v1.StartDialogResponse} returns this
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.setResponseText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string audio_uri = 2;
 * @return {string}
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.getAudioUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialog.v1.StartDialogResponse} returns this
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.setAudioUri = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sentiric.dialog.v1.StartDialogResponse} returns this
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.clearAudioUri = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.hasAudioUri = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string next_action = 3;
 * @return {string}
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.getNextAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialog.v1.StartDialogResponse} returns this
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.setNextAction = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sentiric.data.v1.CallContext updated_context = 4;
 * @return {?proto.sentiric.data.v1.CallContext}
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.getUpdatedContext = function() {
  return /** @type{?proto.sentiric.data.v1.CallContext} */ (
    jspb.Message.getWrapperField(this, sentiric_data_v1_context_pb.CallContext, 4));
};


/**
 * @param {?proto.sentiric.data.v1.CallContext|undefined} value
 * @return {!proto.sentiric.dialog.v1.StartDialogResponse} returns this
*/
proto.sentiric.dialog.v1.StartDialogResponse.prototype.setUpdatedContext = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.dialog.v1.StartDialogResponse} returns this
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.clearUpdatedContext = function() {
  return this.setUpdatedContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialog.v1.StartDialogResponse.prototype.hasUpdatedContext = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.dialog.v1.ProcessUserInputRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.dialog.v1.ProcessUserInputRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
callId: jspb.Message.getFieldWithDefault(msg, 1, ""),
text: jspb.Message.getFieldWithDefault(msg, 2, ""),
audioData: msg.getAudioData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputRequest}
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.dialog.v1.ProcessUserInputRequest;
  return proto.sentiric.dialog.v1.ProcessUserInputRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.dialog.v1.ProcessUserInputRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputRequest}
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setCallId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.dialog.v1.ProcessUserInputRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.dialog.v1.ProcessUserInputRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string call_id = 1;
 * @return {string}
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.getCallId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputRequest} returns this
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.setCallId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputRequest} returns this
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes audio_data = 3;
 * @return {string}
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.getAudioData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes audio_data = 3;
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {string}
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.getAudioData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioData()));
};


/**
 * optional bytes audio_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {!Uint8Array}
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.getAudioData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputRequest} returns this
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.setAudioData = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputRequest} returns this
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.clearAudioData = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialog.v1.ProcessUserInputRequest.prototype.hasAudioData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sentiric.dialog.v1.ProcessUserInputResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sentiric.dialog.v1.ProcessUserInputResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
responseText: jspb.Message.getFieldWithDefault(msg, 1, ""),
audioUri: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
nextAction: jspb.Message.getFieldWithDefault(msg, 3, ""),
updatedContext: (f = msg.getUpdatedContext()) && sentiric_data_v1_context_pb.CallContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputResponse}
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sentiric.dialog.v1.ProcessUserInputResponse;
  return proto.sentiric.dialog.v1.ProcessUserInputResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sentiric.dialog.v1.ProcessUserInputResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputResponse}
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setResponseText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setAudioUri(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setNextAction(value);
      break;
    case 4:
      var value = new sentiric_data_v1_context_pb.CallContext;
      reader.readMessage(value,sentiric_data_v1_context_pb.CallContext.deserializeBinaryFromReader);
      msg.setUpdatedContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sentiric.dialog.v1.ProcessUserInputResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sentiric.dialog.v1.ProcessUserInputResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNextAction();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUpdatedContext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      sentiric_data_v1_context_pb.CallContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional string response_text = 1;
 * @return {string}
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.getResponseText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputResponse} returns this
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.setResponseText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string audio_uri = 2;
 * @return {string}
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.getAudioUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputResponse} returns this
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.setAudioUri = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputResponse} returns this
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.clearAudioUri = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.hasAudioUri = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string next_action = 3;
 * @return {string}
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.getNextAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputResponse} returns this
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.setNextAction = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sentiric.data.v1.CallContext updated_context = 4;
 * @return {?proto.sentiric.data.v1.CallContext}
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.getUpdatedContext = function() {
  return /** @type{?proto.sentiric.data.v1.CallContext} */ (
    jspb.Message.getWrapperField(this, sentiric_data_v1_context_pb.CallContext, 4));
};


/**
 * @param {?proto.sentiric.data.v1.CallContext|undefined} value
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputResponse} returns this
*/
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.setUpdatedContext = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sentiric.dialog.v1.ProcessUserInputResponse} returns this
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.clearUpdatedContext = function() {
  return this.setUpdatedContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sentiric.dialog.v1.ProcessUserInputResponse.prototype.hasUpdatedContext = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.sentiric.dialog.v1);
