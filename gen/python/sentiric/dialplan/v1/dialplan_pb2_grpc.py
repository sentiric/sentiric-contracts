# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sentiric.dialplan.v1 import dialplan_pb2 as sentiric_dot_dialplan_dot_v1_dot_dialplan__pb2


class DialplanServiceStub(object):
    """ESKİ METODU SİLİYORUZ.
    rpc GetDialplanForUser(GetDialplanForUserRequest) returns (GetDialplanForUserResponse);
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ResolveDialplan = channel.unary_unary(
                '/sentiric.dialplan.v1.DialplanService/ResolveDialplan',
                request_serializer=sentiric_dot_dialplan_dot_v1_dot_dialplan__pb2.ResolveDialplanRequest.SerializeToString,
                response_deserializer=sentiric_dot_dialplan_dot_v1_dot_dialplan__pb2.ResolveDialplanResponse.FromString,
                _registered_method=True)


class DialplanServiceServicer(object):
    """ESKİ METODU SİLİYORUZ.
    rpc GetDialplanForUser(GetDialplanForUserRequest) returns (GetDialplanForUserResponse);
    """

    def ResolveDialplan(self, request, context):
        """YENİ VE DAHA AKILLI METOD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DialplanServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ResolveDialplan': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveDialplan,
                    request_deserializer=sentiric_dot_dialplan_dot_v1_dot_dialplan__pb2.ResolveDialplanRequest.FromString,
                    response_serializer=sentiric_dot_dialplan_dot_v1_dot_dialplan__pb2.ResolveDialplanResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sentiric.dialplan.v1.DialplanService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sentiric.dialplan.v1.DialplanService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DialplanService(object):
    """ESKİ METODU SİLİYORUZ.
    rpc GetDialplanForUser(GetDialplanForUserRequest) returns (GetDialplanForUserResponse);
    """

    @staticmethod
    def ResolveDialplan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sentiric.dialplan.v1.DialplanService/ResolveDialplan',
            sentiric_dot_dialplan_dot_v1_dot_dialplan__pb2.ResolveDialplanRequest.SerializeToString,
            sentiric_dot_dialplan_dot_v1_dot_dialplan__pb2.ResolveDialplanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
