# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sentiric.sip.v1 import signaling_pb2 as sentiric_dot_sip_dot_v1_dot_signaling__pb2


class SipSignalingServiceStub(object):
    """SipSignalingService, iç servislerin SIP sinyalleşme mantığını
    kontrol etmesi için gRPC metotları sunar.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TerminateCall = channel.unary_unary(
                '/sentiric.sip.v1.SipSignalingService/TerminateCall',
                request_serializer=sentiric_dot_sip_dot_v1_dot_signaling__pb2.TerminateCallRequest.SerializeToString,
                response_deserializer=sentiric_dot_sip_dot_v1_dot_signaling__pb2.TerminateCallResponse.FromString,
                _registered_method=True)


class SipSignalingServiceServicer(object):
    """SipSignalingService, iç servislerin SIP sinyalleşme mantığını
    kontrol etmesi için gRPC metotları sunar.
    """

    def TerminateCall(self, request, context):
        """Belirtilen Call-ID'ye sahip aktif bir çağrıyı kontrollü bir şekilde sonlandırır.
        Bu RPC, genellikle agent-service tarafından, diyalog akışı
        tamamlandığında çağrılır.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SipSignalingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TerminateCall': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateCall,
                    request_deserializer=sentiric_dot_sip_dot_v1_dot_signaling__pb2.TerminateCallRequest.FromString,
                    response_serializer=sentiric_dot_sip_dot_v1_dot_signaling__pb2.TerminateCallResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sentiric.sip.v1.SipSignalingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sentiric.sip.v1.SipSignalingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SipSignalingService(object):
    """SipSignalingService, iç servislerin SIP sinyalleşme mantığını
    kontrol etmesi için gRPC metotları sunar.
    """

    @staticmethod
    def TerminateCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sentiric.sip.v1.SipSignalingService/TerminateCall',
            sentiric_dot_sip_dot_v1_dot_signaling__pb2.TerminateCallRequest.SerializeToString,
            sentiric_dot_sip_dot_v1_dot_signaling__pb2.TerminateCallResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
