# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sentiric.user.v1 import user_pb2 as sentiric_dot_user_dot_v1_dot_user__pb2


class UserServiceStub(object):
    """Kullanıcı servisi, kullanıcı bilgilerini yönetir.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUser = channel.unary_unary(
                '/sentiric.user.v1.UserService/GetUser',
                request_serializer=sentiric_dot_user_dot_v1_dot_user__pb2.GetUserRequest.SerializeToString,
                response_deserializer=sentiric_dot_user_dot_v1_dot_user__pb2.GetUserResponse.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """Kullanıcı servisi, kullanıcı bilgilerini yönetir.
    """

    def GetUser(self, request, context):
        """Belirli bir ID'ye sahip kullanıcıyı getirir.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=sentiric_dot_user_dot_v1_dot_user__pb2.GetUserRequest.FromString,
                    response_serializer=sentiric_dot_user_dot_v1_dot_user__pb2.GetUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sentiric.user.v1.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sentiric.user.v1.UserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """Kullanıcı servisi, kullanıcı bilgilerini yönetir.
    """

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sentiric.user.v1.UserService/GetUser',
            sentiric_dot_user_dot_v1_dot_user__pb2.GetUserRequest.SerializeToString,
            sentiric_dot_user_dot_v1_dot_user__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
